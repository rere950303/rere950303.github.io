<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://rere950303.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://rere950303.github.io/" rel="alternate" type="text/html" /><updated>2021-09-22T22:29:29+09:00</updated><id>https://rere950303.github.io/feed.xml</id><title type="html">YHW Blog</title><subtitle>새로운 배움을 기록하고 공유합니다</subtitle><author><name>yhw</name></author><entry><title type="html">[Spring][Core] 스프링 핵심 원리</title><link href="https://rere950303.github.io/spring/core/SpringCore/" rel="alternate" type="text/html" title="[Spring][Core] 스프링 핵심 원리" /><published>2021-09-22T00:00:00+09:00</published><updated>2021-09-22T00:00:00+09:00</updated><id>https://rere950303.github.io/spring/core/SpringCore</id><content type="html" xml:base="https://rere950303.github.io/spring/core/SpringCore/">&lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;
&lt;p&gt;해당 게시글은 인프런 김영한 강사님의 &lt;a href=&quot;https://www.inflearn.com/course/스프링-핵심-원리-기본편/dashboard&quot;&gt;스프링 핵심 원리 - 기본편&lt;/a&gt; 강의를 바탕으로 쓰였음을 미리 밝힙니다.&lt;/p&gt;
&lt;h2 id=&quot;객체-지향-설계와-스프링&quot;&gt;객체 지향 설계와 스프링&lt;/h2&gt;
&lt;h3 id=&quot;좋은-객체-지향-프로그래밍&quot;&gt;좋은 객체 지향 프로그래밍&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;스프링은 객체 지향 언어가 가진 강력한 특징을 살려내는 프레임워크&lt;/li&gt;
  &lt;li&gt;객체 지향 언어의 특징: 캡슐화, &lt;u&gt;다형성&lt;/u&gt;, 추상화, 상속&lt;/li&gt;
  &lt;li&gt;역할과 구현의 분리 -&amp;gt; 인터페이스와 구현클래스&lt;/li&gt;
  &lt;li&gt;다형성으로 인터페이스를 구현한 객체(서버 기능 구현)를 실행 시점에 유연하게 변경&lt;/li&gt;
  &lt;li&gt;확장 가능한 설계, 클라이언트에 영향을 주지 않는 구현클래스의 변경&lt;/li&gt;
  &lt;li&gt;스프링에서 이야기하는 제어의 역전, 의존관계 주입은 다형성을 활용해서 역할과 구현을 편리하게 다룰 수 있도록 지원&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;좋은-객체-지향-설계의-5가지-원칙solid&quot;&gt;좋은 객체 지향 설계의 5가지 원칙(SOLID)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;SRP: 단일 책임 원칙(변경이 있을 때 파급 효과가 적으면 단일 책임 원칙을 잘 따른 것)&lt;/li&gt;
  &lt;li&gt;OCP: 개방-폐쇄 원칙(확장에는 열려 있으나 변경에는 닫혀 있어야 한다. 이를 위해서는 서비스 로직에서  클라이언트 본인이 구현클래스에 의존하면 안된다)&lt;/li&gt;
  &lt;li&gt;LSP: 리스코프 치환 원칙(다형성에서 구현클래스는 인터페이스 규약과 기능을 다 지켜야 한다는 것)&lt;/li&gt;
  &lt;li&gt;ISP: 인터페이스 분리 원칙(수 많은 기능을 포함하는 범용 인터페이스보다 특정 클라이언트를 위한 인터페이스 지향)&lt;/li&gt;
  &lt;li&gt;DIP: 의존관계 역전 원칙(추상화에 의존해야 하며 구체화에 의존하면 안된다. 즉 구현클래스가 아닌 인터페이스에만 의존해야 한다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다형성 만으로는 서비스 로직에서 인터페이스 &lt;u&gt;뿐만 아니라&lt;/u&gt; 구현클래스에도 의존하므로 구현클래스가 달라지는 경우 코드변경이 일어나 OCP, DIP를 지킬 수 없다.&lt;/p&gt;
&lt;h3 id=&quot;객체-지향-설계와-스프링-1&quot;&gt;객체 지향 설계와 스프링&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;스프링은 DI 기술(DI 컨테이너)로 다형성 + OCP, DIP를 가능하게 지원&lt;/li&gt;
  &lt;li&gt;즉 클라이언트 코드의 변경 없이 기능 확장 지원&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ioc제어의-역전-di-그리고-컨테이너&quot;&gt;IoC(제어의 역전), DI, 그리고 컨테이너&lt;/h2&gt;
&lt;h3 id=&quot;제어의-역전&quot;&gt;제어의 역전&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;사용 영역과 구성 영역의 분리(관심사의 분리)&lt;/li&gt;
  &lt;li&gt;사용 영역인 서비스 로직은 어떠한 구현객체가 들어오는지 모른체 자신의 기능과 로직만을 실행할 뿐이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;프레임워크&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;라이브러리&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;프레임워크가 내가 작성한 코드를 제어하고, 대신 실행하면 그것은 프레임워크다&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;내가 작성한 코드가 직접 제어의 흐름을 담당한다면 그것은 라이브러리다&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;di&quot;&gt;DI&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;서비스 로직(클라이언트)은 인터페이스만 의존한다&lt;/li&gt;
  &lt;li&gt;정적인 의존관계(인터페이스)와 동적인 의존관계(인터페이스의 구현객체)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;di-컨테이너&quot;&gt;DI 컨테이너&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;인터페이스 구현객체를 생성하고 관리하여 의존관계를 연결&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;스프링-컨테이너와-스프링-빈&quot;&gt;스프링 컨테이너와 스프링 빈&lt;/h2&gt;
&lt;h3 id=&quot;스프링-컨테이너&quot;&gt;스프링 컨테이너&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;ApplicationContext(인터페이스)를 스프링 컨테이너라고 한다.&lt;/li&gt;
  &lt;li&gt;XML기반 또는 애노테이션 기반의 자바 설정 클래스로 만들 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt;이 붙은 클래스를 컨테이너 설정 정보로 활용한다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Bean&lt;/code&gt; 이 붙은 메서드를 모두 호출해서 반환된 객체를 컨테이너에 빈으로 등록한다.&lt;/li&gt;
  &lt;li&gt;빈 이름의 디폴트 값은 메서드 이름이며 항상 다른 이름은 부여해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;beanfactory&quot;&gt;BeanFactory&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;스프링 컨테이너의 최상위 인터페이스&lt;/li&gt;
  &lt;li&gt;빈을 관리하고 조회하는 역할&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;applicationcontext&quot;&gt;ApplicationContext&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;BeanFactory 기능을 상속받아 부가 기능을 지원&lt;/li&gt;
  &lt;li&gt;메시지소스를 활용한 국제화 기능&lt;/li&gt;
  &lt;li&gt;환경변수(로컬, 개발, 운영)&lt;/li&gt;
  &lt;li&gt;편리한 리소스 조회&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;beandefinition인터페이스&quot;&gt;BeanDefinition(인터페이스)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;스프링이 다양한 형태의 설정 정보(XML, 애노테이션)를 BeanDefinition으로 추상화&lt;/li&gt;
  &lt;li&gt;빈 설정 메타정보로서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Bean&lt;/code&gt;당 각각 하나씩 메타정보가 생성된다.&lt;/li&gt;
  &lt;li&gt;ApplicationContext는 BeanDefinitionReader를 이용하여 BeanDefinition를 생성하고 이를 이용해 빈으로 등록한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;싱글톤-컨테이너&quot;&gt;싱글톤 컨테이너&lt;/h2&gt;
&lt;h3 id=&quot;싱글톤-패턴&quot;&gt;싱글톤 패턴&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;스프링 없는 순수한 컨테이너는 요청을 할 때 마다 객체를 새로 생성하여 메모리 낭비가 심하다.&lt;/li&gt;
  &lt;li&gt;해당 객체를 딱 1개만 생성하고 공유하도록 설계&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static&lt;/code&gt;으로 객체를 하나만 생성한 후 생성자를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt;으로 설정하여 새로운 인스턴스 생성을 막음과 동시에 싱글톤을 보장한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;—&amp;gt; 문제점: 코드가 많이 들어가고 클라이언트가 서비스 구현 클래스에 의존하여 DIP, OCP위반 가능성이 있다. 또한 내부 속성을 변경하기 어렵고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt;생성자로 자식 클래스를 만들기 어려워 유연성이 떨어진다.&lt;/p&gt;
&lt;h3 id=&quot;싱글톤-컨테이너-1&quot;&gt;싱글톤 컨테이너&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;싱글톤 패턴을 이용하지 않고도 빈을 싱글톤으로 관리&lt;/li&gt;
  &lt;li&gt;싱글톤 패턴의 모든 단점을 해결하면서 객체를 싱글톤으로 유지&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;싱글톤-방식의-주의점&quot;&gt;싱글톤 방식의 주의점&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;하나의 객체 인스턴스를 &lt;strong&gt;공유&lt;/strong&gt;하기 때문에 무상태로 설계해야 한다.&lt;/li&gt;
  &lt;li&gt;특정 클라이언트가 값을 변경할 수 있는 필드가 있으면 안되고 읽기만 가능해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;configuration과-싱글톤&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Configuration&lt;/code&gt;과 싱글톤&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;스프링이 CGLIB라는 바이트코드 조작 라이브러리를 사용해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppConfig&lt;/code&gt;클래스를 상속받은 임의의 다른 클래스를 만들고, 그 다른 클래스를 빈으로 등록한다.&lt;/li&gt;
  &lt;li&gt;컨테이너에 이미 빈으로 등록이 되었다면 존재하는 빈을 반환하고, 그게 아니면 빈을 생성해서 컨테이너에 등록한 후에 해당 빈을 반환한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;컴포넌트-스캔&quot;&gt;컴포넌트 스캔&lt;/h2&gt;
&lt;h3 id=&quot;컴포넌트-스캔과-의존관계-자동-주입&quot;&gt;컴포넌트 스캔과 의존관계 자동 주입&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;스프링은 설정 정보가 없어도 자동으로 빈을 등록하는 컴포넌트 스캔이라는 기능을 제공&lt;/li&gt;
  &lt;li&gt;의존관계도 자동 주입하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Autowired&lt;/code&gt;라는 기능을 제공&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Component&lt;/code&gt;애노테이션이 붙은 클래스를 스캔해서 빈으로 등록한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;탐색-위치와-기본-스캔-대상&quot;&gt;탐색 위치와 기본 스캔 대상&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;basePackages&lt;/code&gt;로 탐색할 패키지의 시작 위치를 정한다.&lt;/li&gt;
  &lt;li&gt;지정하지 않으면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ComponentScan&lt;/code&gt;이 붙은 설정 정보 클래스의 패키지가 시작 위치가 된다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Controller&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Service&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Repository&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt;도 스캔 대상이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;중복-등록과-충돌&quot;&gt;중복 등록과 충돌&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;자동 빈 등록 vs 자동 빈 등록&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;수동 빈 등록 vs 자동 빈 등록&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConflictingBeanDefinitionException&lt;/code&gt;&lt;br /&gt;예외 발생&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;수동 빈 등록이 우선권을 가진다. 수동 빈이 자동 빈을 오버라이딩 한다. 단 버그 발생 우려로 최근 스프링 부트는 오류가 발생하도록 기본 값을 바꾸었다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;의존관계-자동-주입&quot;&gt;의존관계 자동 주입&lt;/h2&gt;
&lt;h3 id=&quot;다양한-의존관계-주입-방법&quot;&gt;다양한 의존관계 주입 방법&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;생성자 주입
    &lt;ul&gt;
      &lt;li&gt;생성자 호출시점에 딱 1번만 호출되는 것이 보장&lt;/li&gt;
      &lt;li&gt;불변, 필수 의존관계에 사용&lt;/li&gt;
      &lt;li&gt;생성자가 1개만 있으면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt;를 생략해도 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;수정자 주입
    &lt;ul&gt;
      &lt;li&gt;setter 메서드를 통해 의존관계를 주입&lt;/li&gt;
      &lt;li&gt;선택, 변경 가능성이 있는 의존관계에 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;필드 주입
    &lt;ul&gt;
      &lt;li&gt;외부에서 변경이 불가능해서 테스트 하기 힘들다.&lt;/li&gt;
      &lt;li&gt;컨테이너 없이 테스트 하는 경우 결국 setter가 필요하므로 사용하지 말자.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;—&amp;gt; 생성자 주입을 선택&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;대부분 의존관계는 불변이다. 생성자 주입은 객체가 생성될때 한 번만 호출되므로 불변으로 설계가 가능하다.&lt;/li&gt;
  &lt;li&gt;순수한 자바 코드로만 테스트 진행시 수정자 주입은 실행은 되지만 NPE가 발생한다. 생성자 주입은 컴파일 오류가 발생한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;final&lt;/code&gt;키워드로 컴파일 오류(생성자 오류)를 발생시킨다. 오직 생성자 주입만 키워드를 사용할 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;옵션-처리&quot;&gt;옵션 처리&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Autowired(required=false)&lt;/code&gt;: 자동 주입할 대상이 없으면 수정자 메서드 자체가 호출 안됨&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Nullable&lt;/code&gt;: 자동 주입할 대상이 없으면 null이 입력된다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Optional&amp;lt;&amp;gt;&lt;/code&gt;: 자동 주입할 대상이 없으면 Optional.empty가 입력된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;조회-빈이-2개-이상&quot;&gt;조회 빈이 2개 이상&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt;는 타입으로 조회하므로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NoUniqueBeanDefinitionException&lt;/code&gt;오류가 발생한다.&lt;br /&gt;&lt;br /&gt;
—&amp;gt; 해결방법&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt;필드 명 매칭
    &lt;ul&gt;
      &lt;li&gt;타입 매칭을 시도하고 여러 빈이 있으면 필드 이름, 파라미터 이름으로 빈 이름 매칭&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Quilifier&lt;/code&gt;사용
    &lt;ul&gt;
      &lt;li&gt;추가 구분자를 붙여주는 방법이지 빈 이름을 변경하는 것은 아니다.&lt;/li&gt;
      &lt;li&gt;추가 구분자로 못찾으면 구분자의 이름과 같은 이름을 가진 빈을 추가로 찾는다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Primary&lt;/code&gt;보다 우선권이 높다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Primary&lt;/code&gt;사용
    &lt;ul&gt;
      &lt;li&gt;우선순위를 정하는 방법이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;애노테이션 직접 만들기
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Quilifier&lt;/code&gt;는 문자로써 컴파일시 타입 체크가 안된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;METHOD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PARAMETER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ANNOTATION_TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Qualifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mainDiscountPolicy&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainDiscountPolicy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;빈-생명주기-콜백&quot;&gt;빈 생명주기 콜백&lt;/h2&gt;
&lt;h3 id=&quot;빈-생명주기-콜백-시작&quot;&gt;빈 생명주기 콜백 시작&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;스프링 빈은 객체 생성 -&amp;gt; 의존관계 주입이라는 라이프 사이클을 가진다. 하지만 생성자 주입의 경우는 동시에 일어난다.&lt;/li&gt;
  &lt;li&gt;초기화 작업은 의존관계 주입이 모두 완료되고 난 다음에 호출해야 한다.&lt;/li&gt;
  &lt;li&gt;스프링은 의존관계 주입이 완료되면 스프링 빈에게 콜백 메서드를 통해서 초기화 시점을 알려준다. 또한 컨테이너가 종료되기 직전 소멸 콜백을 준다.&lt;/li&gt;
  &lt;li&gt;스프링 빈의 이벤트 라이프사이클&lt;br /&gt;
컨테이너 생성 -&amp;gt; 빈 생성 -&amp;gt; 의존관계 주입 -&amp;gt; 초기화 콜백 -&amp;gt; 사용 -&amp;gt; 소멸전 콜백 -&amp;gt; 스프링 종료&lt;/li&gt;
  &lt;li&gt;객체의 생성과 초기화의 분리: 생성자 안에서 무거운 초기화 작업을 함께 하는 것 보다는 객체를 생성하는 부분과 초기화 하는 부분을 명확하게 나누는 것이 요지보수에 좋다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;인터페이스-initializingbean-disposablebean&quot;&gt;인터페이스 InitializingBean, DisposableBean&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InitializingBean&lt;/code&gt; 은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;afterPropertiesSet()&lt;/code&gt; 메서드로 초기화를 지원한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DisposableBean&lt;/code&gt; 은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;destroy()&lt;/code&gt; 메서드로 소멸을 지원한다.&lt;/li&gt;
  &lt;li&gt;단, 코드가 스프링 전용 인터페이스에 의존하며 코드를 수정할 수 없는 외부 라이브러리에 적용할 수 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;빈-등록-초기화-소멸-메서드&quot;&gt;빈 등록 초기화, 소멸 메서드&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;설정 정보에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;close&quot;)&lt;/code&gt; 처럼 초기화, 소멸 메서드를 지정할 수 있다.&lt;/li&gt;
  &lt;li&gt;코드가 아니라 사용하기 때문에 코드를 고칠 수 없는 외부 라이브러리에도 적용할 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Bean&lt;/code&gt;의 destroyMethod는 기본값이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(inferred)&lt;/code&gt; 으로 등록되어 있다. 이 추론 기능은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;close&lt;/code&gt; , &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shutdown&lt;/code&gt; 라는 이름의 메서드를 자동으로 호출해준다. 이름 그대로 종료 메서드를 추론해서 호출해준다. 따라서 직접 스프링 빈으로 등록하면 종료 메서드는 따로 적어주지 않아도 잘 동작한다. 추론 기능을 사용하기 싫으면&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;destroyMethod=&quot;&quot;&lt;/code&gt; 처럼 빈 공백을 지정하면 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;애노테이션-postconstruct-predestory&quot;&gt;애노테이션 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@PostConstruct&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@PreDestory&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;가장 편리하며 자바 표준 기술이다. 따라서 스프링이 아닌 다른 컨테이너에서도 동작한다.&lt;/li&gt;
  &lt;li&gt;외부 라이브러리에는 적용하지 못하므로 이 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Bean&lt;/code&gt; 기능을 사용하자.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;빈-스코프&quot;&gt;빈 스코프&lt;/h2&gt;
&lt;h3 id=&quot;빈-스코프란&quot;&gt;빈 스코프란&lt;/h3&gt;
&lt;p&gt;스코프는 번역 그대로 빈이 존재 할 수 있는 범위를 뜻한다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;싱글톤: 기본 스코프, 컨테이너의 시작과 종료까지 유지되는 가장 넓은 범위의 스코프이다.&lt;/li&gt;
  &lt;li&gt;프로토타입: 컨테이너는 프로토타입 빈의 생성과 의존관계 주입과 초기화 까지만 관여하고 더는 관리하지 않는 매우 짧은 범위의 스코프이다. 따라서 종료메서드가 호출되지 않는다.&lt;/li&gt;
  &lt;li&gt;웹 관련 스코프
    &lt;ul&gt;
      &lt;li&gt;request: 웹 요청이 들어오고 나갈떄 까지 유지되는 스코프이다.&lt;/li&gt;
      &lt;li&gt;session: 웹 세션이 생성되고 종료될 떄 까지 유지되는 스코프이다.&lt;/li&gt;
      &lt;li&gt;application: 웹의 서블릿 컨텍스트와 같은 범위로 유지되는 스코프이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;프로토타입-스코프&quot;&gt;프로토타입 스코프&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;컨테이너에 조회하면 항상 새로운 인스턴스를 생성해서 반환한다.&lt;/li&gt;
  &lt;li&gt;컨테이너는 빈의 생성과 의존관계 주입 그리고 초기화까지만 관여한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;프로토타입-스코프---싱글톤-빈과-함께-사용시-문제&quot;&gt;프로토타입 스코프 - 싱글톤 빈과 함께 사용시 문제&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;싱글톤 빈이 의존관계 주입을 통해서 프로토타입 빈을 주입받아서 사용하는 경우&lt;/li&gt;
  &lt;li&gt;주입 시점에 컨테이너에 프로토타입 빈을 요청한다.&lt;/li&gt;
  &lt;li&gt;내부에 가지고 있는 프로토타입 빈은 이미 과거에 주입이 끝난 빈으로써 사용 할 때마다 새로 생성되는 것이 아니다.&lt;/li&gt;
  &lt;li&gt;프로토타입 빈을 주입 시점에만 새로 생성하는게 아니라, 사용할 때 마다 새로 생성해서 사용하는 것을 원할 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;프로토타입-스코프---싱글톤-빈과-함께-사용시-provider로-문제-해결&quot;&gt;프로토타입 스코프 - 싱글톤 빈과 함께 사용시 Provider로 문제 해결&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;가장 간단한 방법은 싱글톤 빈이 프로토타입을 사용할 때 마다 컨테이너에 새로 요청하는 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;logic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 	&lt;span class=&quot;nc&quot;&gt;PrototypeBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prototypeBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PrototypeBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;prototypeBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prototypeBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;의존관계를 외부에서 주입 받는게 아니라&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ac.getBean(PrototypeBean.class)&lt;/code&gt;처럼 직접 필요한 의존관계를 찾는 것을 Dependency Lookup 의존관계 조회라고 한다.&lt;/li&gt;
  &lt;li&gt;단, 컨테이너 자체를 주입받게 되면 컨테이너에 종속적인 코드가 되고 단위 테스트의 어려움이 따른다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;objectfactory-objectprovider&quot;&gt;ObjectFactory, ObjectProvider&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PrototypeBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prototypeBeanProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;logic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;PrototypeBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prototypeBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prototypeBeanProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;prototypeBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prototypeBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;과거에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ObjectFactory&lt;/code&gt; 가 있었는데, 여기에 편의 기능을 추가해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ObjectProvider&lt;/code&gt; 가 만들어졌다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ObjectProvider&lt;/code&gt; 는 지금 딱 필요한 DL 정도의 기능만 제공한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;jsr-330-provider&quot;&gt;JSR-330 Provider&lt;/h4&gt;
&lt;p&gt;이 방법을 사용하려면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javax.inject:javax.inject:1&lt;/code&gt; 라이브러리를 gradle에 추가해야 한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PrototypeBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;logic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;PrototypeBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prototypeBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;prototypeBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prototypeBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;자바 표준이고, 기능이 단순하므로 단위테스트를 만들거나 mock 코드를 만들기는 훨씬 쉬워진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;웹-스코프&quot;&gt;웹 스코프&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;웹 스코프는 웹 환경에서만 동작한다.&lt;/li&gt;
  &lt;li&gt;스프링이 해다 스코프의 종료시점까지 관리한다. 따라서 종료 메서드가 호출된다.&lt;/li&gt;
  &lt;li&gt;웹 스코프 종류
    &lt;ol&gt;
      &lt;li&gt;request: HTTP 요청 하나가 들어오고 나갈 때 까지 유지되는 스코프로써 각각의 요청마다 별도의 빈 인스턴스가 생성되고 관리된다.&lt;/li&gt;
      &lt;li&gt;session: HTTP Session과 동일한 생명주기를 가지는 스코프&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;request-스코프와-provider&quot;&gt;request 스코프와 Provider&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequiredArgsConstructor&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogDemoController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogDemoService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logDemoService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MyLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myLoggerProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;log-demo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;logDemo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRequestURL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;MyLogger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myLogger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myLoggerProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;myLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRequestURL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestURL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;myLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;controller test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;logDemoService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;logic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;OK&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ObjectProvider&lt;/code&gt; 덕분에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ObjectProvider.getObject()&lt;/code&gt; 를 호출하는 시점까지 request scope 빈의 생성을 지연할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;스코프와-프록시&quot;&gt;스코프와 프록시&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxyMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ScopedProxyMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TARGET_CLASS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyLogger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;적용 대상이 인터페이스가 아닌 클래스면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TARGET_CLASS&lt;/code&gt; 를 선택&lt;/li&gt;
  &lt;li&gt;적용 대상이 인터페이스면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INTERFACES&lt;/code&gt; 를 선택&lt;/li&gt;
  &lt;li&gt;이렇게 하면 MyLogger의 가짜 프록시 클래스를 만들어두고 HTTP request와 상관 없이 가짜 프록시 클래스를 다른 빈에 미리 주입해 둘 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Scope&lt;/code&gt; 의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proxyMode = ScopedProxyMode.TARGET_CLASS)&lt;/code&gt; 를 설정하면 스프링 컨테이너는 CGLIB 라는 바이트코드를 조작하는 라이브러리를 사용해서, MyLogger를 상속받은 가짜 프록시 객체를 생성한다.&lt;/li&gt;
  &lt;li&gt;그리고 스프링 컨테이너에 “myLogger”라는 이름으로 진짜 대신에 이 가짜 프록시 객체를 등록한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ac.getBean(&quot;myLogger&quot;, MyLogger.class)&lt;/code&gt;로 조회해도 프록시 객체가 조회되는 것을 확인할 수 있다. 그래서 의존관계 주입도 이 가짜 프록시 객체가 주입된다.&lt;/li&gt;
  &lt;li&gt;이 가짜 프록시 객체는 실제 요청이 오면 그때 내부에서 실제 빈을 요청하는 위임 로직이 들어있다. 내부에 단순한 위임 로직만 있고, 싱글톤 처럼 동작한다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>yhw</name></author><category term="Spring" /><category term="Core" /><category term="Object-oriented" /><category term="Spring" /></entry><entry><title type="html">[SQL] WHERE과 HAVING의 차이</title><link href="https://rere950303.github.io/sql/where&having/" rel="alternate" type="text/html" title="[SQL] WHERE과 HAVING의 차이" /><published>2021-09-19T00:00:00+09:00</published><updated>2021-09-19T00:00:00+09:00</updated><id>https://rere950303.github.io/sql/where&amp;having</id><content type="html" xml:base="https://rere950303.github.io/sql/where&amp;having/">&lt;h2 id=&quot;where&quot;&gt;WHERE&lt;/h2&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;테이블&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;FROM의 테이블에서 GROUP BY 전에 테이블의 행을 걸러내고 그룹화를 진행한다.&lt;/p&gt;

&lt;h2 id=&quot;having&quot;&gt;HAVING&lt;/h2&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;테이블&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;HAVING&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;FROM의 테이블에서 먼저 그룹화를 진행하고 HAVING 절에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count(*) &amp;gt; 1&lt;/code&gt; 과 같은 조건으로 그룹 걸러낸다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;즉 요약하면 WHERE은 그룹화 전에 HAVING은 그룹화 후에 실행된다.&lt;/p&gt;</content><author><name>yhw</name></author><category term="SQL" /><category term="SQL" /><category term="HAVING" /><category term="WHERE" /><category term="GROUP BY" /></entry><entry><title type="html">[JAVA] equals()&amp;amp;hashCode() 오버라이딩</title><link href="https://rere950303.github.io/java/equals()&hashCode()/" rel="alternate" type="text/html" title="[JAVA] equals()&amp;amp;hashCode() 오버라이딩" /><published>2021-09-18T00:00:00+09:00</published><updated>2021-09-18T00:00:00+09:00</updated><id>https://rere950303.github.io/java/equals()&amp;hashCode()</id><content type="html" xml:base="https://rere950303.github.io/java/equals()&amp;hashCode()/">&lt;p&gt;해싱이란 해시함수를 이용해서 데이터를 해시테이블에 링크드리스트 형태로 저장하고 검색하는 기법을 말한다.&lt;br /&gt;
해시함수는 데이터가 저장되어 있는 곳을 알려 주기 때문에 다량의 데이터 중에서도 원하는 데이터를 빠르게 찾을 수 있다. 
Objects클래스의 hashCode() 메소드가 해시함수를 구현하고 있다.&lt;/p&gt;

&lt;hr /&gt;
&lt;ol&gt;
  &lt;li&gt;동일한 객체에 대해 여러 번 hashCode()를 호출해도 동일한 값을 반환해야 한다.&lt;/li&gt;
  &lt;li&gt;equals()가 참인 두 객체의 hashCode() 결과는 반드시 같아야 한다.&lt;/li&gt;
  &lt;li&gt;equals()가 거짓인 두 객체의 hashCode() 결과가 같을 수 있지만 HastMap등에서 검색 속도가 떨어져 성능이 저하될 수 있으므로 서로 다른 값을 반환하도록 적절히 오버라이딩 해야한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 방식으로 오버라이딩 할 수 있다.&lt;/p&gt;</content><author><name>yhw</name></author><category term="JAVA" /><category term="JAVA" /><category term="equals" /><category term="hashCode" /></entry><entry><title type="html">[SQL] ON과 WHERE의 차이</title><link href="https://rere950303.github.io/sql/on&where/" rel="alternate" type="text/html" title="[SQL] ON과 WHERE의 차이" /><published>2021-09-18T00:00:00+09:00</published><updated>2021-09-18T00:00:00+09:00</updated><id>https://rere950303.github.io/sql/on&amp;where</id><content type="html" xml:base="https://rere950303.github.io/sql/on&amp;where/">&lt;h2 id=&quot;on&quot;&gt;ON&lt;/h2&gt;
&lt;p&gt;ON을 사용하면 조인 대상을 필터링 하고 조인할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deptno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dept&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deptno&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deptno&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deptno&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deptno&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;급여가 2000이 넘는 직원만 dept 테이블과 조인하여 SELECT절을 실행시킬 수 있다.&lt;br /&gt;
ON은 조인조건이므로 부서에 직원이 없거나 급여가 2000이 넘는 직원이 없더라도 조인 테이블에 부서에 대한 데이터가 남아있다. 참고로 내부 조인은 ON과 WHERE의 결과가 같다.&lt;/p&gt;

&lt;h2 id=&quot;where&quot;&gt;WHERE&lt;/h2&gt;
&lt;p&gt;WHERE을 사용하면 조인 &lt;u&gt;후&lt;/u&gt; 조인테이블의 데이터를 행 단위로 걸러내는 역할을 한다.&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deptno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dept&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deptno&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deptno&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deptno&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deptno&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;직원이 없거나 급여가 2000이 넘는 직원이 한명도 없는 경우 해당 부서에 대한 데이터는
조인테이블에서 걸러진다.&lt;/p&gt;</content><author><name>yhw</name></author><category term="SQL" /><category term="SQL" /><category term="ON" /><category term="WHERE" /></entry><entry><title type="html">[Daily] 개발 공부를 기록하고 공유하기 위한 첫 발걸음</title><link href="https://rere950303.github.io/daily/firstposting/" rel="alternate" type="text/html" title="[Daily] 개발 공부를 기록하고 공유하기 위한 첫 발걸음" /><published>2021-09-16T00:00:00+09:00</published><updated>2021-09-16T00:00:00+09:00</updated><id>https://rere950303.github.io/daily/firstposting</id><content type="html" xml:base="https://rere950303.github.io/daily/firstposting/">&lt;p&gt;개발 공부를 하면서 기록하는 습관의 중요성을 알게 되었다. 얼마 전에 똑같이 고민했던 문제를 두고 다시 구글링을 해야하는 일이 빈번히 발생하는 것이다.
앞으로 나아가면서 고민하면서 공부한 지식을 기록하여 함께 나누고 기억하고자 블로그를 개설하여 첫 포스팅을 하게 되었다.
쉬더라도 멈추지는 않는 내가 되었으면 하는 바람에 첫 글을 작성한다. 화이팅&lt;/p&gt;</content><author><name>yhw</name></author><category term="Daily" /><category term="Daily" /></entry><entry><title type="html">[Git] commit 수정하기</title><link href="https://rere950303.github.io/git/git(amend)/" rel="alternate" type="text/html" title="[Git] commit 수정하기" /><published>2021-09-16T00:00:00+09:00</published><updated>2021-09-16T00:00:00+09:00</updated><id>https://rere950303.github.io/git/git(amend)</id><content type="html" xml:base="https://rere950303.github.io/git/git(amend)/">&lt;h2 id=&quot;push-하지-않은-경우&quot;&gt;push 하지 않은 경우&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;가장 최근 commit 수정
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit --amend&lt;/code&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;과거 commit 또는 한 번에 여러개의 commit 수정
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt; 로 수정하고자 하는 commit 확인&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase -i HEAD~n&lt;/code&gt; 수정하고자 하는 commit의 개수를 입력&lt;/li&gt;
      &lt;li&gt;수정하고 싶은 커밋 옆에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pick&lt;/code&gt; 을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reword&lt;/code&gt; 로 수정&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:wq&lt;/code&gt; 로 커밋 리스트를 저장하고 순서대로 수정후에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:wq&lt;/code&gt; 로 저장&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;push-한-경우&quot;&gt;push 한 경우&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push --force branchname&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>yhw</name></author><category term="Git" /><category term="Git" /><category term="amend" /><category term="rebase" /></entry></feed>