<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://rere950303.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://rere950303.github.io/" rel="alternate" type="text/html" /><updated>2021-12-23T00:25:54+09:00</updated><id>https://rere950303.github.io/feed.xml</id><title type="html">YHW Blog</title><subtitle>새로운 배움을 기록하고 공유합니다</subtitle><author><name>yhw</name></author><entry><title type="html">[Spring][Log] 로깅</title><link href="https://rere950303.github.io/spring/log/Log/" rel="alternate" type="text/html" title="[Spring][Log] 로깅" /><published>2021-12-23T00:00:00+09:00</published><updated>2021-12-23T00:00:00+09:00</updated><id>https://rere950303.github.io/spring/log/Log</id><content type="html" xml:base="https://rere950303.github.io/spring/log/Log/">&lt;h2 id=&quot;로깅-라이브러리&quot;&gt;로깅 라이브러리&lt;/h2&gt;
&lt;p&gt;스프링 부트 라이브러리를 사용하면 스프링 부트 로깅 라이브러리( &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spring-boot-starter-logging&lt;/code&gt; )가 함께 포함된다. 스프링 부트 로깅 라이브러리는 기본으로 다음 로깅 라이브러리를 사용한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;SLF4J, Logback&lt;/li&gt;
  &lt;li&gt;로그 라이브러리는 Logback, Log4J, Log4J2 등등 수 많은 라이브러리가 있는데, 그것을 통합해서 인터페이스로 제공하는 것이 바로 SLF4J 라이브러리다. 쉽게 이야기해서 SLF4J는 인터페이스이고, 그 구현체로 Logback 같은 로그 라이브러리를 선택하면 된다. 실무에서는 스프링 부트가 기본으로 제공하는 Logback을 대부분 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;로그-선언&quot;&gt;로그 선언&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private Logger log = LoggerFactory.getLogger(getClass());&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Slf4j&lt;/code&gt; : 롬복 사용 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//@Slf4j&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogTestController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/log-test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;logTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Spring&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;trace log={}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;debug log={}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; info log={}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; warn log={}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;error log={}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//로그를 사용하지 않아도 a+b 계산 로직이 먼저 실행됨, 이런 방식으로 사용하면 X &lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;String concat log=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ok&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;LEVEL: TRACE &amp;gt; DEBUG &amp;gt; INFO &amp;gt; WARN &amp;gt; ERROR&lt;/li&gt;
  &lt;li&gt;개발 서버는 debug 출력&lt;/li&gt;
  &lt;li&gt;운영 서버는 info 출력&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;로그-레벨-설정&quot;&gt;로그 레벨 설정&lt;/h2&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#전체 로그 레벨 설정(기본 info) &lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;logging.level.root=info&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#hello.springmvc 패키지와 그 하위 로그 레벨 설정 &lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;logging.level.hello.springmvc=debug&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;올바른-로그-사용법&quot;&gt;올바른 로그 사용법&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log.debug(&quot;data=&quot;+data)&lt;/code&gt;: 로그 출력 레벨을 info로 설정해도 해당 코드에 있는 “data=”+data가 실제 실행이 되어 버린다. 결과적으로 문자 더하기 연산이 발생한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log.debug(&quot;data={}&quot;, data)&lt;/code&gt;: 로그 출력 레벨을 info로 설정하면 아무일도 발생하지 않는다. 따라서 앞과 같은 의미없는 연산이 발생하지 않는다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>yhw</name></author><category term="Spring/Log" /><category term="Spring" /><category term="Log" /><category term="SLF4J" /><category term="Logback" /></entry><entry><title type="html">[Docker] 도커와 CI환경</title><link href="https://rere950303.github.io/docker/Docker&CI/" rel="alternate" type="text/html" title="[Docker] 도커와 CI환경" /><published>2021-12-22T00:00:00+09:00</published><updated>2021-12-22T00:00:00+09:00</updated><id>https://rere950303.github.io/docker/Docker&amp;CI</id><content type="html" xml:base="https://rere950303.github.io/docker/Docker&amp;CI/">&lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;
&lt;p&gt;해당 게시글은 인프런 John Ahn 강사님의 &lt;a href=&quot;https://www.inflearn.com/course/따라하며-배우는-도커-ci/dashboard&quot;&gt;따라하며 배우는 도커와 CI환경&lt;/a&gt; 강의를 바탕으로 쓰였음을 미리 밝힙니다.&lt;/p&gt;

&lt;h2 id=&quot;도커-기본&quot;&gt;도커 기본&lt;/h2&gt;
&lt;h3 id=&quot;도커를-쓰는-이유&quot;&gt;도커를 쓰는 이유&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Installer를 통한 설치의 경우 갖고 있는 서버, 패키지 버전, 운영체제 등에 따라 프로그램을 설치하는 과정중에 많은 에러들이 발생한다. 또한 그 과정이 복합하다.&lt;/li&gt;
  &lt;li&gt;도커를 이용하여 예상치 못한 에러를 줄일 수 있으며 그 과정이 매우 간단하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;도커란-무엇인가&quot;&gt;도커란 무엇인가?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;컨테이너를 사용하여 응용프로그램을 더 쉽게 만들고 배포하고 실행할 수 있도록 설계된 도구이며 컨테이너 기반의 오프소스 가상화 플랫폼을 말한다.&lt;/li&gt;
  &lt;li&gt;다양한 프로그램, 실행환경을 컨테이너로 추상화하고 동일한 인터페이스를 제공하여 프로그램의 배포 및 관리를 단순하게 해준다. AWS, Google cloud 등 어디에서든 실행 가능하게 해준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;도커-이미지와-도커-컨테이너-정의&quot;&gt;도커 이미지와 도커 컨테이너 정의&lt;/h3&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/post/Docker_CI/1.png&quot;&gt;
          &lt;img src=&quot;/assets/images/post/Docker_CI/1.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;컨테이너는 코드와 모든 종속성을 패키지화하여 응용 프로그램이 한 컴퓨팅 환경에서 다른 컴퓨팅 환경으로 빠르고 안정적으로 실행되도록 하는 스프트웨어의 표준 단위&lt;/li&gt;
  &lt;li&gt;이미지는 코드, 런타임, 시스템 도구, 시스템 라이브러리 및 설정과 같은 응용 프로그램을 실행하는 데 필요한 모든 것을 포함하는 가볍고 독립적이며 실행 가능한 소프트웨어 패키지&lt;/li&gt;
  &lt;li&gt;컨테이너는 소프트웨어를 환경으로부터 격리시키고 개발과 스테이징의 차이에도 불구하고 균일하게 작동하도록 보장&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;도커를-사용할-때의-흐름&quot;&gt;도커를 사용할 때의 흐름&lt;/h3&gt;
&lt;p&gt;먼저 도커 CLI에 커맨드를 입력 -&amp;gt; 도커 서버(도커 데몬)이 그 커맨드를 받아서 그것에 따라 이미지를 생성하든 컨테이너를 실행하든 모든 작업을 하게된다. -&amp;gt; 이미지 캐쉬 보관 장소에 해당되는 이미지가 없다면 도커허브에서 이미지를 pull&lt;/p&gt;

&lt;h3 id=&quot;도커와-기존의-가상화-기술과의-차이를-통한-컨테이너-이해&quot;&gt;도커와 기존의 가상화 기술과의 차이를 통한 컨테이너 이해&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;하이퍼 바이저 기반의 VM 구조: 하드웨어 및 호스트 OS 위에 하이퍼바이저가 있고 그 위에 VM을 띄우고 여기서 게스트 OS를 띄운다. 하이퍼바이저에 의해 구동되는 각 VM은 CPU, MEMORY 등 하드웨어 자원을 게스트 OS에 에뮬레이트 하는 방식으로 할당받는데 오버헤드가 크다.&lt;/li&gt;
  &lt;li&gt;도커 컨테이너의 구조: 하이퍼바이저와 게스트 OS가 필요하지 않아 가볍다. 호스트 OS위에 이미지를 통한 컨테이너를 띄운다. 다른 컨테이너와 호스트 OS의 동일한 커널을 공유한다. 따라서 컨테이너 내부에서 실행되는 프로세스는 호스트 시스템에서 디버그나 로깅이 가능하다.&lt;/li&gt;
  &lt;li&gt;컨테이너 격리 기술: 리눅스의 가상화 기술
    &lt;ul&gt;
      &lt;li&gt;C Group: CPU, 메모리 등 프로세스 그룹의 시스템 리소스 사용량을 관리&lt;/li&gt;
      &lt;li&gt;네임스페이스: 하나의 시스템에서 프로세스를 격리시키는 가상화 기술, 별개의 독립된 공간을 사용하는 것처럼 격리된 환경을 제공하는 경량 프로세스 가상화 기술&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;이미지로-컨테이너-만들기&quot;&gt;이미지로 컨테이너 만들기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;이미지: 시작시 실행 될 명령어(run maraidb) + 파일 스냅샷(mariadb 파일)&lt;/li&gt;
  &lt;li&gt;파일 스냅샷을 컨테이너로 카피 후에 명령어도 카피하여 maradb를 실행&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;리눅스의-cgroup-네임스페이스-커널-기능을-쓸-수-있는-이유&quot;&gt;리눅스의 Cgroup, 네임스페이스 커널 기능을 쓸 수 있는 이유&lt;/h3&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/post/Docker_CI/2.png&quot;&gt;
          &lt;img src=&quot;/assets/images/post/Docker_CI/2.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Cgroup 기능을 통해 호스트의 리소스를 컨테이너 단위로 할당하고 네임스페이스 기능을 통해 프로세스를 컨테이너에 격리&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;기본적인-도커-클라이언트-명령어&quot;&gt;기본적인 도커 클라이언트 명령어&lt;/h2&gt;
&lt;h3 id=&quot;도커-이미지-내부-파일-구조&quot;&gt;도커 이미지 내부 파일 구조&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker run 이미지이름&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;docker: 도커 클라이언트 언급&lt;/li&gt;
      &lt;li&gt;run: 컨테이너 생성 및 실행&lt;/li&gt;
      &lt;li&gt;이미지이름: 컨테이너를 위한 이미지&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker run 이미지이름 ls&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;ls: 원래 이미지가 가지고 있는 시작 명령어(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run hello-world&lt;/code&gt;)를 무시하고 여기에 있는 커맨드를 실행&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello-world&lt;/code&gt;이미지로는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; 명령어 사용 불가: 해당 환경에서 실행 가능한 명령어만 입력&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;컨테이너-나열&quot;&gt;컨테이너 나열&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CTAINER ID + IMAGE + COMMAND + CREATED + STATUS + PORTS + NAMES&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;COMMAND: 컨테이너 시작시 실행될 명령어, 대부분 이미지에 내장되어 있어 별도 설정이 필요 없다.&lt;/li&gt;
      &lt;li&gt;PORTS: 컨테이너가 개방한 포트와 호스트에 연결한 포트&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;원하는 항목만 보기: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker ps --format &apos;table\table&apos;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;도커-컨테이너의-생명주기&quot;&gt;도커 컨테이너의 생명주기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker run&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker create 이미지이름&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker start 컨테이너아이디/이름&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;create: 이미지의 파일스냅샷을 컨테이너를 생성하고 할당된 하드디스크에 카피&lt;/li&gt;
      &lt;li&gt;start: 이미지 명령어를 실행&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker start -a 이미지이름&lt;/code&gt;: -a 옵션의 경우 터미널에서 컨테이너 아웃풋을 볼 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;docker-stop-vs-docker-kill&quot;&gt;Docker Stop vs Docker Kill&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker stop&lt;/code&gt;: gracefully하게 중지 시킨다. 그동안 하던 작업을 마무리하고 중지 시킨다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker kill&lt;/code&gt;: 바로 중지 시킨다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;컨테이너-삭제하기&quot;&gt;컨테이너 삭제하기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker rm 아이디/이름&lt;/code&gt;: 실행중인 컨테이너는 먼저 중지한 후에 삭제 가능&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker rm docker ps -a -q&lt;/code&gt;: 모든 컨테이너 삭제&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker system prune&lt;/code&gt;: 한번에 모든 컨테이너, 이미지 삭제, 실행중인 컨테이너에는 영향을 주지 않음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;실행-중인-컨테이너에-명령어-전달&quot;&gt;실행 중인 컨테이너에 명령어 전달&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;docker exec 컨테이너아이디 명령어: 이미 실행중인 컨테이너에 명령어를 전달&lt;/li&gt;
  &lt;li&gt;docker run의 경우 컨테이너를 새로 생성항여 명령어를 실행&lt;/li&gt;
  &lt;li&gt;컨테이너 CLI(셸 환경)를 실행시키려면 명령어 자리에 sh, bash, zsh 등을 넣으면 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;도커-이미지-만들어보기&quot;&gt;도커 이미지 만들어보기&lt;/h2&gt;
&lt;h3 id=&quot;도커-이미지-생성-순서&quot;&gt;도커 이미지 생성 순서&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Dockerfile -&amp;gt; 도커 클라이언트 -&amp;gt; 도커 서버 -&amp;gt; 이미지 생성
    &lt;ul&gt;
      &lt;li&gt;Dockerfile: 이미지 생성을 위한 설정 파일, 컨테이너가 어떻게 행동해야 하는지에 대한 설정들을 정의&lt;/li&gt;
      &lt;li&gt;도커 서버: 클라이언트에 전달된 작업을 처리&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dockerfile-만들기&quot;&gt;Dockerfile 만들기&lt;/h3&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/post/Docker_CI/3.png&quot;&gt;
          &lt;img src=&quot;/assets/images/post/Docker_CI/3.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;도커 파일 만드는 순서
    &lt;ul&gt;
      &lt;li&gt;베이스 이미지를 명시(FROM)&lt;/li&gt;
      &lt;li&gt;추가적으로 필요한 파일을 다운 받기 위한 몇가지 명령어를 명시(RUN)&lt;/li&gt;
      &lt;li&gt;컨테이너 시작시 실행 될 명령어를 명시(CMD)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;베이스 이미지란
    &lt;ul&gt;
      &lt;li&gt;도커 이미지는 여러개의 레이어로 되어있다. 그중에서 베이스 이미지는 기반이 되는 부분이다.&lt;/li&gt;
      &lt;li&gt;레이어는 중간 단계의 이미지라고 생각하면 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;도커-파일로-도커-이미지-만들기&quot;&gt;도커 파일로 도커 이미지 만들기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Dockerfile -&amp;gt; 도커 클라이언트 -&amp;gt; 도커 서버 -&amp;gt; 이미지&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker build ./&lt;/code&gt; 또는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker build .&lt;/code&gt;(./ . 는 현재 디렉토리를 의미)&lt;/li&gt;
  &lt;li&gt;이미지 만드는 순서
    &lt;ol&gt;
      &lt;li&gt;FROM 베이스 이미지로 임시 컨테이너 생성&lt;/li&gt;
      &lt;li&gt;이미지에 다른 레이어가 존재하면 해당 레이어의 파일 스냅샷 또한 컨테이너에 추가&lt;/li&gt;
      &lt;li&gt;시작시 실행할 명령어(CMD)를 컨테이너에 추가&lt;/li&gt;
      &lt;li&gt;이를 토대로 새로운 이미지를 만들고 임시 컨테이너 삭제&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;즉 이미지로 컨테이너를 만들 수 있고, 컨테이너로 이미지도 만들 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;이미지-이름-부여&quot;&gt;이미지 이름 부여&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker build -t 도커아이디/이미지이름:태그 ./&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;docker-volumes&quot;&gt;Docker Volumes&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker run -p 5000:8080 -v /usr/src/app/node_modules -v $(pwd):/usr/src/app 이미지 아이디&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/src/app/node_modules&lt;/code&gt;: 호스트 디렉토리에 없으므로 매핑 제외&lt;/li&gt;
      &lt;li&gt;pwd는 현재 디렉토리를 의미&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;docker-compose&quot;&gt;Docker Compose&lt;/h2&gt;
&lt;h3 id=&quot;docker-compose란&quot;&gt;Docker Compose란&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;다중 컨테이너 도커 애플리케이션을 정의하고 실행하기 위한 도구&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;레디스&quot;&gt;레디스&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;메모리 기반의 키-값 구조 데이터 관리 시스템이며, 데이터를 메모리에 저장하고 빠르게 조회할 수 있는 비관계형 데이터베이스이다.&lt;/li&gt;
  &lt;li&gt;메모리에 저장을 하기 때문에 데이터를 저장하는것과 로딩하는데 훨씬 빠르게 처리할 수가 있으며, 비록 메모리에 저장하지만 영속적으로도 보관이 가능하다.&lt;/li&gt;
  &lt;li&gt;레디스 클라이언트 생성
    &lt;ul&gt;
      &lt;li&gt;도커 환경이 아닌 경우: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;host: &quot;https://redis-server.com&quot;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;도커 환경인 경우: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;host: &quot;redis-server&quot;&lt;/code&gt;, docker-compose.yml 파일에 명시한 컨테이너 이름으로 주면된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;도커-컨테이너-사이의-통신&quot;&gt;도커 컨테이너 사이의 통신&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose build&lt;/code&gt;: 이미지를 빌드하기만 하며 컨테이너를 시작하지 않는다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up&lt;/code&gt;: 이미지가 존재하지 않을 경우에만 빌드하며, 컨테이너를 시작한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose -d up&lt;/code&gt;: 백그라운드에서 실행&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up --build&lt;/code&gt;: 이미지를 강제로 빌드하며, 컨테이너를 시작한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up -- no --build&lt;/code&gt;: 이미지 빌드 없이, 컨테이너를 시작한다. 이미지가 없을시 실패&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;간단한-어플-배포&quot;&gt;간단한 어플 배포&lt;/h2&gt;
&lt;h3 id=&quot;리액트-앱-설치&quot;&gt;리액트 앱 설치&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npx create-react-app ./&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;개발 단계: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm run start&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;테스트 단계: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm run test&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;배포 단계: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm run build&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;도커를-이용하여-리액트-앱-실행&quot;&gt;도커를 이용하여 리액트 앱 실행&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Dockerfile.dev&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;FROM node:alpine&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;WORKDIR /usr/src/app&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;COPY package.json ./&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;RUN npm install // 여기서 node_modules 생성되므로 로컬에서는 node_modules 지우고 이를 통해 COPY에서 시간 단축&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;COPY ./ ./&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;CMD [&quot;npm&quot;, &quot;run&quot;, &quot;start&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker build -f Dockerfile.dev ./&lt;/code&gt;: -f는 이미지를 빌드할 때 쓰일 도커 파일을 지정해준다.&lt;/li&gt;
  &lt;li&gt;package.json변경: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;start&quot;: &quot;react-scripts --openssl-legacy-provider start&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;도커-볼륨을-이용한-소스-코드-변경&quot;&gt;도커 볼륨을 이용한 소스 코드 변경&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker run -it -p 3000:3000 -v /usr/src/app/node_modules -v $(pwd):/usr/src/app react&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;도커-컴포즈-이용&quot;&gt;도커 컴포즈 이용&lt;/h3&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Dockerfile.dev&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3000:3000&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/usr/src/app/node_modules&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./:/usr/src/app&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stdin_open&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;운영환경을-위한-nginx&quot;&gt;운영환경을 위한 Nginx&lt;/h3&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/post/Docker_CI/4.png&quot;&gt;
          &lt;img src=&quot;/assets/images/post/Docker_CI/4.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;개발 서버는 소스 변경시 자동으로 다시 빌드하여 변경 소스를 반영해줌으로써 개발 환경에 특화된 기능들이 있다. 하지만 운영 환경에서는 소스 변경시 바로 다시 반영해줄 필요가 없으며 개발에 필요한 기능들이 필요하지 않기에 더 깔끔하고 빠른 Nginx를 웹 서버로 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;운영환경-도커-이미지를-위한-dockerfile-작성하기&quot;&gt;운영환경 도커 이미지를 위한 Dockerfile 작성하기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm run build&lt;/code&gt;로 생성한 빌드 파일을 Nginx 서버가 브라우저에서 보일수 있게 설정&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;FROM node:alpine as builder&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;WORKDIR /usr/src/app&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;COPY package.json ./&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;RUN npm install&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;COPY ./ ./&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;CMD [&quot;npm&quot;, &quot;run&quot;, &quot;build&quot;]&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;FROM nginx&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;COPY --from=builder /usr/src/app/build /usr/share/nginx/html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--from=builder&lt;/code&gt;: 다른 stage에 있는 파일을 복사할때 다른 stage 이름을 명시&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;간단한-어플을-실제로-배포해보기테스트--배포-부분&quot;&gt;간단한 어플을 실제로 배포해보기(테스트 &amp;amp; 배포 부분)&lt;/h2&gt;
&lt;h3 id=&quot;travis-ci-설명&quot;&gt;Travis CI 설명&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Travis CI를 이용하면 원격 저장소에 있는 프로젝트를 특정 이벤트에 따라 자동으로 테스트, 빌드하거나 배포할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;로컬저장소에 있는 소스를 깃허브에 push한다&lt;/li&gt;
  &lt;li&gt;Travis CI에게 소스가 push 되었다고 알려준다.&lt;/li&gt;
  &lt;li&gt;Travis CI는 업데이트 된 소스를 깃허브에서 가져온다.&lt;/li&gt;
  &lt;li&gt;깃허브에서 가져온 소스를 테스트 코드를 실행해본다.&lt;/li&gt;
  &lt;li&gt;테스트가 성공하면 AWS같은 호스팅 사이트로 보내서 배포한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;travisyml-파일-작성하기-테스트까지&quot;&gt;.travis.yml 파일 작성하기 (테스트까지)&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;도커환경에서 리액트앱을 실행하고 있으니 Travis CI에서도 도커환경 구성&lt;/li&gt;
  &lt;li&gt;구성된 도커 환경에서 Dockerfile.dev를 이용해서 도커 이미지 생성&lt;/li&gt;
  &lt;li&gt;어떻게 Test를 수행할 것이지 설정해주기&lt;/li&gt;
  &lt;li&gt;어떻게 AWS에 소스코드를 배포할 것인지 설정해주기&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;required&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;generic&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;before_install&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo &quot;start creating an image with dockerfile&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker build -t react -f Dockerfile.dev .&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker run -e CI=true react npm run test -- --coverage // 실행할 스크립트(테스트 실행)&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;after_success&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo &quot;test success&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;aws-알아보기&quot;&gt;AWS 알아보기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;EC2란: Amazon Elastic Compute Cloud(Amazon EC2)는 AWS 클라우드에서 확장식 컴퓨팅을 제공한다. Amazon EC2를 사용하면 하드웨어에 선투자할 필요가 없어 더 빠르게 앱을 개발하고 배포할 수 있다. Amazon EC2를 통해 원하는 만큼 가상 서버를 구축하고 보안 및 네트쿼크 구성과 스토리지 관리가 가능하다.
    &lt;ul&gt;
      &lt;li&gt;Amazon EC2는 한대의 컴퓨터를 임대한다고 생각하면 된다. 그리고 그 컴퓨터에 OS를 설치하고 웹서비스를 위한 프로그램들(WAS, DB)을 설치해서 사용할 수 있다. 1대의 컴퓨터를 하나의 EC2 인스턴스라고 부른다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;EB란: AWS Elastic Beanstalk는 Apache, nginx 같은 친숙한 서버에서 Java, NET. PHP, Node.js, Python, Ruby, GO 및 Docker와 함께 개발된 웹 응용 프로그램 및 서비스를 배포하고 확장하기 쉬운 서비스이다. EC2 인스턴스나 데이터베이스 같이 많은 것들을 포함한 환경을 구성하며 만들고 있는 소프트웨어를 업데이트 할때마다 자동으로 이 환경을 관리해준다.&lt;/li&gt;
  &lt;li&gt;Travis CI에서 도커 이미지 생성 -&amp;gt; 도커 허브 저장 -&amp;gt; 해당 이미지를 AWS EB에서 받아서 컨테이너 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;elastic-beanstalk-환경-구성하기&quot;&gt;Elastic Beanstalk 환경 구성하기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;로드 발란서 -&amp;gt; EC2 인스턴스(64bit Amazon Linux) -&amp;gt; 도커 컨테이너 -&amp;gt; 어플리케이션&lt;/li&gt;
  &lt;li&gt;트래픽이 많을 경우 EB 환경에 있는 로드 발란서가 각 EC2로 트래픽을 분산&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;travisyml-파일-작성하기-배포-부분&quot;&gt;.travis.yml 파일 작성하기 (배포 부분)&lt;/h3&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;required&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;generic&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;before_install&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo &quot;start creating an image with dockerfile&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker build -t react -f Dockerfile.dev .&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker run -e CI=true react npm run test -- --coverage // dockerfile의 CMD &quot;npm&quot; &quot;run&quot; &quot;start&quot; 를 덮어씀&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;elasticbeanstalk&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;us-east-2&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;react&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;React-env&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bucket_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;elasticbeanstalk-us-east-2-601633539824&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bucket_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;react&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;all_branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;provider&lt;/code&gt;: 외부 서비스 표시&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;region&lt;/code&gt;: 현재 사용하고 있는 AWS의 서비스가 위치하고 있는 물리적 장소&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt;: 생성된 앱 이름&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bucket_name&lt;/code&gt;: 해당 EB를 위한 s3 버켓 이름 (Travics CI는 가지고 있는 파일을 압축해서 먼저 s3에 보낸다.)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bucket_path&lt;/code&gt;: 앱 이름과 동일&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;branch&lt;/code&gt;: 어떤 브랜치에 push를 할때 AWS에 배포를 할것인지.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;travis-ci의-aws접근을-위한-api-생성&quot;&gt;Travis CI의 AWS접근을 위한 API 생성&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;깃허브 -&amp;gt; Travis CI -&amp;gt; AWS: Travis CI 아이디 로그인시 깃허브 연동으로 인증을 하고, AWS에서 제공해주는 secret key를 travis.yml 파일에다가 적어주면 된다.&lt;/li&gt;
  &lt;li&gt;Seceret, Access API Key 받는 순서
    &lt;ul&gt;
      &lt;li&gt;IAM USER 생성: Identity and Access Management의 약자로써 AWS 리소스에 대한 액세스를 안전하게 제어할 수 있는 웹 서비스이다. IAM을 사용하여 리소스를 사용하도록 인증 및 인가된 대상을 제어한다.
        &lt;ul&gt;
          &lt;li&gt;Root 생성자: 현재 우리가 처음 가입하여 사용하고 있는 계정, AWS 서비스 및 리소스에 대한 완전한 액세스 권한이 있음&lt;/li&gt;
          &lt;li&gt;IAM 사용자: root 사용자가 부여한 권한만 가지고 있음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;API키를 yml 파일에 적어주기
        &lt;ul&gt;
          &lt;li&gt;직접 키를 Travis.yml 파일에 적으면 노출 위험이 있기 때문에 Travis 웹사이트 해당 저장소에 저장하고 yml파일에서 불러오는 형태를 취해야 한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Amazon Linux2 플랫폼 사용시 EB는 docker-compose.yml 을 보고 처리한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;복잡한-어플을-실제로-배포해보기개발-환경-부분&quot;&gt;복잡한 어플을 실제로 배포해보기(개발 환경 부분)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Nginx의 Proxy를 이용한 설계(요청 라우팅): client -&amp;gt; Nginx(80) -&amp;gt; location/ 의 경우 React에서 정적 리소스 처리(3000), location/api 의 경우 DB(3306)와 연동된 백엔드 서버에서 처리(5000)&lt;/li&gt;
  &lt;li&gt;Dockerfile.dev / Dockerfile: Front -&amp;gt; Server -&amp;gt; Mysql -&amp;gt; Nginx&lt;/li&gt;
  &lt;li&gt;Travis CI 에서 테스트 성공시 Dockerfile를 이용하여 이미지 생성후 도커 허브에 저장 -&amp;gt; EB 에서 해당 이미지를 통해 배포&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;frontend&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Dockerfile.dev&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./frontend&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/app/node_modules&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./frontend:/app&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stdin_open&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;nginx&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;// proxy 역할&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Dockerfile&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./nginx&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3000:80&quot;&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;na&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Dockerfile.dev&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./backend&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app_backend&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/app/node_modules&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./backend:/app&lt;/span&gt;
    
  &lt;span class=&quot;na&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;linux/amd64&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./mysql&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;unless-stopped&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app_mysql&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3306:3306&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./mysql/mysql_data:/var/lib/mysql&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./mysql/sqls/:/docker-entrypoint-initdb.d/&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;johnahn&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myapp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;복잡한-어플을-실제로-배포해보기테스트--배포-부분&quot;&gt;복잡한 어플을 실제로 배포해보기(테스트 &amp;amp; 배포 부분)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;소스 파일을 github에 올린후 travis CI를 이용해서 테스트 후 도커 이미지를 빌드한다. 이후 해다 이미지를 docker hub에 올린후 AWS EB에서 pull하여 서비스를 배포한다.&lt;/li&gt;
  &lt;li&gt;.travis.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;generic&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;required&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;before_install&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker build -t rere95/react-test-app -f ./frontend/Dockerfile.dev ./frontend&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker run -e CI=true rere95/react-test-app npm test&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;after_success&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker build -t rere95/docker-frontend ./frontend&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker build -t rere95/docker-backend ./backend&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker build -t rere95/docker-nginx ./nginx&lt;/span&gt;

  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo &quot;$DOCKER_HUB_PASSWORD&quot; | docker login -u &quot;$DOCKER_HUB_ID&quot; --password-stdin&lt;/span&gt;

  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker push rere95/docker-frontend&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker push rere95/docker-backend&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker push rere95/docker-nginx&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;elasticbeanstalk // 외부 서비스&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ap-northeast-2&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;// 외부 서비스가 위치한 물리적 장소&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;docker-fullstack-app&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;DockerFullstackApp-env&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bucket_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;elasticbeanstalk-ap-northeast-2-972153559337&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bucket_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;docker-fullstack-app&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master // 어떤 브랜치에 Push 할때 AWS에 배포할 것인지&lt;/span&gt;
  
  &lt;span class=&quot;na&quot;&gt;access_key_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$AWS_ACCESS_KEY&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;secret_access_key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$AWS_SECRET_ACCESS_KEY&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;docker-compose.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2.4&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;frotend&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rere95/docker-frontend&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/app/node_modules&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./frontend:/app&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stdin_open&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mem limit&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;128m&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;nginx&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rere95/docker-nginx&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;-80:80&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mem limit&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;128m&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;frontend&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;backend&lt;/span&gt;
  
  &lt;span class=&quot;na&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rere95/docker-backend&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app_backend&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/app/node_modules&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./backend:/app&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;MYSQL_HOST&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker-fullstack-mysql.cmok.ap-northest-2.rds.com&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;MYSQL_USER&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;root&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1234&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myapp&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;MYSQL_PORT&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3306&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mem limit&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;128m&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;vpcvirtual-private-cloud와-security-group-설정하기&quot;&gt;VPC(virtual private cloud)와 Security Group 설정하기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;AWS와 RDS를 이용하여 MYSQL를 앱과 연결시켜야 하는데 그거을 하기위해서 VPC와 Security Group을 설정해주어야 한다.&lt;/li&gt;
  &lt;li&gt;VPC: AWS 클라우드에서 논리적으로 격리된 공간을 프로비저닝하여 고객이 정의하는 가상 네트워크에서 리소스를 시작할 수 있다. 내가 AWS에서 EC2, EB, RDS 인스턴스를 만들었다면 이러한 인스턴스들을 나의 아이디에서만 접근이 가능하게 논리적으로 격리된 네트워크에서 생성이 되게 해준다. 따라서 다른 아이디로는 접근 불가능하다.&lt;/li&gt;
  &lt;li&gt;Security Group
    &lt;ul&gt;
      &lt;li&gt;Inbound: 외부에서 EB 인스턴스로 요청을 보내는 트래픽을 말한다.(HTTP, HTTPS, SSH 등)&lt;/li&gt;
      &lt;li&gt;Outbound: EB 인스턴스에서 외부로 나가는 트래픽을 말한다. 파일을 다운로드 하거나 inbound로 들어온 트래픽을 처리하여 응답하는 경우도 포함된다.&lt;/li&gt;
      &lt;li&gt;같은 VPC에서 오는 트래픽은 모두 허용하여 같은 VPC에 있는 EB 인스턴스와 RDS 인스턴스가 통신 가능하도록 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>yhw</name></author><category term="Docker" /><category term="Docker" /><category term="CI" /></entry><entry><title type="html">[DB] Basic Query Structure</title><link href="https://rere950303.github.io/db/BasicQueryStructure/" rel="alternate" type="text/html" title="[DB] Basic Query Structure" /><published>2021-11-25T00:00:00+09:00</published><updated>2021-11-25T00:00:00+09:00</updated><id>https://rere950303.github.io/db/BasicQueryStructure</id><content type="html" xml:base="https://rere950303.github.io/db/BasicQueryStructure/">&lt;h2 id=&quot;data-manipulation-languagedml&quot;&gt;Data-manipulation language(DML)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;insert, delete, update tuples&lt;/li&gt;
  &lt;li&gt;typical SQL&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;An&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;predicate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-select-clause&quot;&gt;The SELECT Clause&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;대소문자를 구별하지 않는다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;distinct&lt;/code&gt; 키워드로 중복되는 값을 제거할 수 있다.&lt;/li&gt;
  &lt;li&gt;asterisk(*): 모든 속성을 선택&lt;/li&gt;
  &lt;li&gt;산술연산을 사용할 수 있다.(+, -, *, /)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nmae&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;기존&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;에는&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;영향&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instructor&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-where-clause&quot;&gt;The WHERE Clause&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;관계대수에서의 selection predicate에 대응&lt;/li&gt;
  &lt;li&gt;결과 relation에서 predicate를 만족하는 tuple만을 추출&lt;/li&gt;
  &lt;li&gt;logical connectives -&amp;gt; and, or, not&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instructor&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dept_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Comp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-from-clause&quot;&gt;The FROM Clause&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;쿼리에 필요한 relation를 나열&lt;/li&gt;
  &lt;li&gt;Cartesian product(공통되는 속성이 있을경우 속성 앞에 relation 이름을 붙여 구별한다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;teaches&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;joins&quot;&gt;Joins&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;원하는 data가 하나의 relation에 없을 경우 2개 이상의 relation을 join&lt;/li&gt;
  &lt;li&gt;Cartesian product와 where절 이용&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;course_id&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;teaches&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;teaches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>yhw</name></author><category term="DB" /><category term="DB" /></entry><entry><title type="html">[DB] Introduction to SQL</title><link href="https://rere950303.github.io/db/IntroSQL/" rel="alternate" type="text/html" title="[DB] Introduction to SQL" /><published>2021-11-24T00:00:00+09:00</published><updated>2021-11-24T00:00:00+09:00</updated><id>https://rere950303.github.io/db/IntroSQL</id><content type="html" xml:base="https://rere950303.github.io/db/IntroSQL/">&lt;h2 id=&quot;data-definition-lauguage&quot;&gt;Data Definition Lauguage&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;SQL의 DDL은 relatioin에 관한 정보를 만든다.&lt;/li&gt;
  &lt;li&gt;각 relation의 스키마&lt;/li&gt;
  &lt;li&gt;각 속성들의 domain&lt;/li&gt;
  &lt;li&gt;무결성 제약조건&lt;/li&gt;
  &lt;li&gt;각 relation의 인덱스 정보 / 보안, 권한 정보&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;domain-types-in-sql&quot;&gt;Domain Types in SQL&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;char(n): 길이가 n인 고정 길이 문자열&lt;/li&gt;
  &lt;li&gt;varchar(n): 최대 길이가 n인 가변 길이 문자열&lt;/li&gt;
  &lt;li&gt;int&lt;/li&gt;
  &lt;li&gt;smallint&lt;/li&gt;
  &lt;li&gt;numeric(p, d): 고정 소수점 실수, p는 부호를 포함한 전체 숫자의 길이, s는 소수점 이하 숫자의 길이&lt;/li&gt;
  &lt;li&gt;real, float(n): float는 길이 n을 사용자가 설정함&lt;/li&gt;
  &lt;li&gt;NULL, NOT NULL: 속성이 null값을 가질 수 있는지의 여부를 선언&lt;/li&gt;
  &lt;li&gt;ex: ID VARCHAR(20) NOT NULL, Deposit INT DEFAULT 0&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;create-table-construct&quot;&gt;Create Table Construct&lt;/h2&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;An&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integrity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constraint1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;...,&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integrity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constraintk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instructor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;          &lt;span class=&quot;nb&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;        &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dept_name&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;numeruc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;integrity-constraints-in-create-table&quot;&gt;Integrity Constraints in Create Table&lt;/h2&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;          &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;        &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dept_name&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tot_cred&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;numeric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;foreign&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dept_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;references&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;department&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dept_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;not null: null값을 가질 수 없고 해당 속성의 값이 null인 tuple를 삽입, 수정하는 동작은 거부됨&lt;/li&gt;
  &lt;li&gt;primary key(객체 무결성 제약조건): tuple의 유일성을 보장하기 위한 규칙으로 각 tuple를 식별하는 역할, null이나 중복되는 값을 가질수 없음&lt;/li&gt;
  &lt;li&gt;foreign key(A1, A2,,) references r(A1, A2,,): 외래키는 relation r의 기본키를 참조함, 외래키의 값은 r에 항상 그 값이 존재해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;drop-and-alter-table-constructs&quot;&gt;Drop and Alter Table Constructs&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;drop table student: 테이블과 내용 모두 삭제&lt;/li&gt;
  &lt;li&gt;delete from dtudent: 내용만 삭제, 테이블 스키마는 유지&lt;/li&gt;
  &lt;li&gt;alter table: 기존 테이블에 새로운 속성을 추가하거나 기존 속성을 삭제
    &lt;ul&gt;
      &lt;li&gt;alter table r add A D (모든 tuple은 새로운 속성에 대해 null값을 가진다.)&lt;/li&gt;
      &lt;li&gt;alter table r drop A (삭제하는 속성이 다른 테이블에서 참조하는 속성인 경우 외래키 무결성 제약조건이 깨질 수 있으므로 조심해야한다.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>yhw</name></author><category term="DB" /><category term="DB" /></entry><entry><title type="html">[AWS] AWS</title><link href="https://rere950303.github.io/aws/AWS/" rel="alternate" type="text/html" title="[AWS] AWS" /><published>2021-11-23T00:00:00+09:00</published><updated>2021-11-23T00:00:00+09:00</updated><id>https://rere950303.github.io/aws/AWS</id><content type="html" xml:base="https://rere950303.github.io/aws/AWS/">&lt;h2 id=&quot;지역과-가용구역&quot;&gt;지역과 가용구역&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Region: 전 세계 아마존 컴퓨터가 존재하는 곳, 서울에도 존재&lt;/li&gt;
  &lt;li&gt;웹사이트 주 사용자의 분포가 중요: 주 소비자가 일본인 경우 일본 인프라를 사용하는 것이 유리&lt;/li&gt;
  &lt;li&gt;가용구역: 하나의 지역에는 여러개의 가용구역이 존재한다. 자연재해 등으로 인한 장애 방지를 위함이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cdncontents-delivery-network&quot;&gt;CDN(Contents Delivery Network)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;CloudFront는 AWS에 제공하는 CDN 서비스이다. 캐싱을 통해 빠른 응답을 보장한다. 전 세계 Edge Server를 두고 Client에 가장 가까운 Edege Server를 찾아서 Latency를 최소화한다.&lt;/li&gt;
  &lt;li&gt;Origin Server: 원본 데이터를 가지고 있는 서버(S3, EC2 등)&lt;/li&gt;
  &lt;li&gt;Edge Server: AWS에서 제공하는 전 세계에 퍼져있는 서비스, 캐싱 기능&lt;/li&gt;
  &lt;li&gt;데이터 전송이 발생하는 과정
    &lt;ol&gt;
      &lt;li&gt;클라이언트로부터 Edge Server로의 요청이 발생한다.&lt;/li&gt;
      &lt;li&gt;Edge Server는 요청이 발생한 데이터에 대하여 캐싱 여부를 확인한다.&lt;/li&gt;
      &lt;li&gt;사용자의 근거리에 위치한 Edge Server 중 캐싱 데이터가 존재한다면 사용자의 요청에 맞는 데이터를 응답한다.&lt;/li&gt;
      &lt;li&gt;사용자의 요청에 적합한 데이터가 캐싱되어 있지 않은 경우 Origin Server로 요청이 포워딩된다.&lt;/li&gt;
      &lt;li&gt;요청받은 데이터에 대해 Origin Server에서 획득한 후  Edge Server에 캐싱 데이터를 생성하고, 클라이언트로 응답이 발생한다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Edge Server의 기본 TTL은 24시간이고 사용자의 설정에 따라 변경이 가능하다. (TTL 수정 시 Edge Server에 반영되는 시간이 한 시간 가량 소요)&lt;/li&gt;
  &lt;li&gt;이러한 캐시의 설정 후 반영 시간 때문에 각 개별 데이터에 대해서 invalidation API(특정 파일을 캐시에서 삭제하는 기능)을 통해 캐시를 삭제한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ec2-elastic-compute-cloud-시작하기&quot;&gt;EC2 (Elastic Compute Cloud) 시작하기&lt;/h2&gt;
&lt;h3 id=&quot;소개&quot;&gt;소개&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;독립된 컴퓨터의 임대&lt;/li&gt;
  &lt;li&gt;인스턴스는 컴퓨터 1대를 의미&lt;/li&gt;
  &lt;li&gt;지역은 서울로 선택&lt;/li&gt;
  &lt;li&gt;원격으로 접속하여 제어 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;인스턴스-타입&quot;&gt;인스턴스 타입&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;여러가지 OS가 존재&lt;/li&gt;
  &lt;li&gt;여러가지 컴퓨터 사양: CPU, Memory, Network, 인스턴스 스토리지 (Type으로 구분)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;인스턴스-장치-설정&quot;&gt;인스턴스 장치 설정&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;임대 컴퓨터 설정&lt;/li&gt;
  &lt;li&gt;인스턴스 개수 설정&lt;/li&gt;
  &lt;li&gt;네트워크 설정&lt;/li&gt;
  &lt;li&gt;종료 방식: stop, terminate&lt;/li&gt;
  &lt;li&gt;스토리지 설정: 용량, 볼륨 유형, 인스턴스 삭제시 삭제 여부&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;태그와-보안그룹&quot;&gt;태그와 보안그룹&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;인스턴스의 역할, 관리자 등&lt;/li&gt;
  &lt;li&gt;키값 형태
    &lt;ul&gt;
      &lt;li&gt;역할: 웹서버&lt;/li&gt;
      &lt;li&gt;관리자: YHW&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인스턴스 접근 권한
    &lt;ul&gt;
      &lt;li&gt;방화벽 역할&lt;/li&gt;
      &lt;li&gt;새로운 보안 그룹 생성 또는 기존 그룹에 인스턴스 추가&lt;/li&gt;
      &lt;li&gt;허용 가능한 여러가지 protocol 유형 선택 가능: SSH, HTTP, HTTPS, DNS 등&lt;/li&gt;
      &lt;li&gt;Source를 통해 특정 IP 설정 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;인스턴스-비밀번호-생성&quot;&gt;인스턴스 비밀번호 생성&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;파일로 비밀번호를 생성&lt;/li&gt;
  &lt;li&gt;인스터스 접속시 해당 비밀번호 필요&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ec2-접속과-사용&quot;&gt;EC2 접속과 사용&lt;/h2&gt;
&lt;h3 id=&quot;osx에서-리눅스-인스턴스로-접속&quot;&gt;OSX에서 리눅스 인스턴스로 접속&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;터미널을 통한 ssh 접속&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod 400 aws_password.pem&lt;/code&gt;: 특정 사용자에게 권한 부여 (UI 로도 가능)&lt;/li&gt;
  &lt;li&gt;인스턴스의 IP를 통해 접속&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh -i &quot;aws_password.pem&quot; ID@IP&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;리눅스에서-웹서버-사용&quot;&gt;리눅스에서 웹서버 사용&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt-get update&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt-get install apache2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;인스턴스의 IP 또는 DNS로 접속 가능&lt;/li&gt;
  &lt;li&gt;사용자의 접속을 위한 보안그룹 설정이 필요함(Source)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;osx에서-windows-인스턴스로-접속&quot;&gt;OSX에서 Windows 인스턴스로 접속&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;윈도우 운영체제로 인스턴스 생성&lt;/li&gt;
  &lt;li&gt;보안그룹 설정이 다름: RDP / HTTP 추가&lt;/li&gt;
  &lt;li&gt;aws_password.pem 을 이용하여 password 생성&lt;/li&gt;
  &lt;li&gt;App store에서 remote 앱 다운&lt;/li&gt;
  &lt;li&gt;PC name: IP, User name: Administrator, password: …&lt;/li&gt;
  &lt;li&gt;GUI로 원격 접속 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;윈도우에서-웹서버사용&quot;&gt;윈도우에서 웹서버사용&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;iis 웹서버 install&lt;/li&gt;
  &lt;li&gt;iis 웹서버 실행&lt;/li&gt;
  &lt;li&gt;wwwroot에 index.html 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;amis&quot;&gt;AMIs&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Amazon Machine Image: 이미지란 인스턴스의 특정시점의 스냅샷을 의미&lt;/li&gt;
  &lt;li&gt;해당 이미지로 새로운 인스턴스 생성 가능&lt;/li&gt;
  &lt;li&gt;이미지 생성시 인스턴스 중단&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;aws-marketplace-wordpress-설치&quot;&gt;AWS Marketplace (Wordpress 설치)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;다른 사람이 만든 이미지로 인스턴스 런칭&lt;/li&gt;
  &lt;li&gt;Docker Hub의 이미지의 개념과 유사&lt;/li&gt;
  &lt;li&gt;운영체제도 aws에서 기본으로 제공하는 AMI이다.&lt;/li&gt;
  &lt;li&gt;이미지의 version, region 선택 가능&lt;/li&gt;
  &lt;li&gt;인스턴스 유형 선택 가능&lt;/li&gt;
  &lt;li&gt;Key pair name 을 통해 ssh 인스턴스 접속 가능&lt;/li&gt;
  &lt;li&gt;App 접속의 경우 App의 ID와 password 알아낸 후 접속&lt;/li&gt;
  &lt;li&gt;DB도 마찬가지 방법으로 접속 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;aws를-이용한-자유로운-규모-확장과-축소&quot;&gt;AWS를 이용한 자유로운 규모 확장과 축소&lt;/h2&gt;
&lt;h3 id=&quot;scalability&quot;&gt;Scalability&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;가상머신: 물리적기계 + 운영체제 + 가상머신(소프트웨어로 만든 기계) + 여러가지의 운영체제&lt;/li&gt;
  &lt;li&gt;VMWare, VirtualBox 등&lt;/li&gt;
  &lt;li&gt;AWS도 물리적 기계가 필요&lt;/li&gt;
  &lt;li&gt;스타트업의 경우 여러가지 EC2의 사양을 선택 효율성 증대 가능&lt;/li&gt;
  &lt;li&gt;큰 회사의 경우 고유 서버 시스템을 갖고 있을수 있지만 여러개의 EC2를 생성하여 서비스 처리 가능&lt;/li&gt;
  &lt;li&gt;AWS 활용시에 트래픽에 따른 융통성 있는 EC2 관리가 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;스트래스-테스트&quot;&gt;스트래스 테스트&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;수비: wordpress(marketplace에서 이미지를 통한 EC2 생성)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;top&lt;/code&gt; 명령어로 CPU 점유율 점검&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;공격: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt-get update&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt-get install apache2-utils&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ab -n 요청횟수 -c 동시접속자수 웹서버주소&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;요청, 동시접속, 총소요시간, 실패, 초당처리속도, 개별처리속도 -&amp;gt; 테이블 작성&lt;/li&gt;
      &lt;li&gt;동시접속이 커질수록 개별처리속도가 비례하여 증가&lt;/li&gt;
      &lt;li&gt;총소요시간과 초당처리속도는 유의미한 차이가 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;elastic-ips&quot;&gt;Elastic IPs&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;현재 인스턴스를 이미지화 하고 해당 이미지로 다시 높은 사양의 인스턴스 생성&lt;/li&gt;
  &lt;li&gt;인스턴스를 멈춘후 다시 시작시 새로운 IP 할당, 새로운 인스턴스 생성 후에도 마찬가지&lt;/li&gt;
  &lt;li&gt;Elastic IP를 통해 위와 같은 문제를 해결 가능(단 유료이다.)&lt;/li&gt;
  &lt;li&gt;Allocate New Address를 통해 IP 할당 가능&lt;/li&gt;
  &lt;li&gt;Associate Address를 통해 생성된 EC2 인스턴스에 일관된 IP 부여 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;인스턴스-교체&quot;&gt;인스턴스 교체&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;이미지 생성후 해당 이미지로 새로운 인스턴스 생성&lt;/li&gt;
  &lt;li&gt;Elastic IP를 기존 인스턴스에서 뺏어온후 새로운 인스턴스에 부여&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scale-out-소개&quot;&gt;Scale out 소개&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;단일 컴퓨팅의 한계를 돌파&lt;/li&gt;
  &lt;li&gt;여러대의 컴퓨팅을 연결&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scale-out의-흐름&quot;&gt;Scale Out의 흐름&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Web Server -&amp;gt; Middle ware -&amp;gt; Database(톰캣 -&amp;gt; 스프링 부트 -&amp;gt; mysql)&lt;/li&gt;
  &lt;li&gt;트랙픽 처리의 가장 간단한 방법은 scale up&lt;/li&gt;
  &lt;li&gt;Web Server, Middle ware, Database를 별도의 EC2로 변경&lt;/li&gt;
  &lt;li&gt;경우에 따라 Database, Middle ware, Web Server scale up 가능&lt;/li&gt;
  &lt;li&gt;ELB를 이용하여 여러 http 요청을 각각의 Web server로 적절히 분산 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;elb-생성&quot;&gt;ELB 생성&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Elastic Load Balance&lt;/li&gt;
  &lt;li&gt;부하를 적절히 분배&lt;/li&gt;
  &lt;li&gt;ELB(Load Balancer Port) 생성후 EC2(Instance Port)와 연결&lt;/li&gt;
  &lt;li&gt;ELB와 EC2는 http 방식으로만 통신 가능&lt;/li&gt;
  &lt;li&gt;Health Check: ELB에서 EC2와의 연결성을 검사(/index.html 다운 가부로 검사하므로 해당 웹서버에 해당 파일이 존재해야 한다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;elb-적용&quot;&gt;ELB 적용&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;웹서버가 설치된 EC2 여러대 준비&lt;/li&gt;
  &lt;li&gt;해당 EC2를 ELB와 연결&lt;/li&gt;
  &lt;li&gt;ELB 주소로 접속&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;elb-주의사항&quot;&gt;ELB 주의사항&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;각 인스턴스별 DB의 경우 하나의 DB로 통합 필요&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;autoscaling-소개&quot;&gt;AutoScaling 소개&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;scale out 자동 설정&lt;/li&gt;
  &lt;li&gt;인스턴스화 이미지 필요&lt;/li&gt;
  &lt;li&gt;이미지로 인스턴스 생성: Launch Configuration&lt;/li&gt;
  &lt;li&gt;Launch Configuration: 인스턴스 생성시 사용될 (내가 미리 생성해둔)이미지 선택, 인스턴스 유형 선택, 보안 그룹 설정&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;autoscaling-group-생성&quot;&gt;AutoScaling Group 생성&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;생성한 인스턴스를 어떠한 조건에서 생성할 것인지에 대한 설정&lt;/li&gt;
  &lt;li&gt;가용구역 설정&lt;/li&gt;
  &lt;li&gt;Load Balacing: ELB에 연결&lt;/li&gt;
  &lt;li&gt;Configure scaling policies: 그룹의 인스턴스 개수 설정(keep / adjust)&lt;/li&gt;
  &lt;li&gt;adjust: CPU Utilization의 경계를 설정하여 알람 설정이 가능하고 세밀한 인스턴스 자동 생성 설정이 가능하다.&lt;/li&gt;
  &lt;li&gt;CloudWatch에서 미리 설정한 알람 확인 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;s3&quot;&gt;S3&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Simple Storage Service: 파일을 저장하는 서비스&lt;/li&gt;
  &lt;li&gt;내구성이 뛰어난 인프라, 중복 저장&lt;/li&gt;
  &lt;li&gt;융통성 있는 가격 정책&lt;/li&gt;
  &lt;li&gt;Bucket: 하나의 저장소(uique해야함)&lt;/li&gt;
  &lt;li&gt;접근 권한 설정 가능&lt;/li&gt;
  &lt;li&gt;서비스 사용자가 업로드한 파일을 저장 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;aws-rds&quot;&gt;AWS RDS&lt;/h2&gt;
&lt;h3 id=&quot;rds-소개&quot;&gt;RDS 소개&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Relational Database Service&lt;/li&gt;
  &lt;li&gt;안전하고 안정적인 DB 운영&lt;/li&gt;
  &lt;li&gt;관계형 데이터베이스: MySQL, MariraDB(MySQL과 완전 호환), Aurora(AWS에서 직접 만든 DB), ORACLE, SQL Server&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rds-서버-생성&quot;&gt;RDS 서버 생성&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;지역 선택 가능&lt;/li&gt;
  &lt;li&gt;Production(여러군데의 가용구역 제공), Dev/Test&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rds-백업--복원&quot;&gt;RDS 백업 &amp;amp; 복원&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;안정성의 추구&lt;/li&gt;
  &lt;li&gt;Multi-AZ: 서로 연동된 여러개의 DB를 생성, 하나의 DB가 죽을경우 standby중인(백업과 비슷한 개념) 다른 DB가 기능&lt;/li&gt;
  &lt;li&gt;백업: take snapshot&lt;/li&gt;
  &lt;li&gt;복원: restore snapshot -&amp;gt; 새로운 DB 인스턴스 생성&lt;/li&gt;
  &lt;li&gt;Restore to Point in Time: DB 인스턴스를 특정 시점으로 되돌리는 기능&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rds-scale-up--out&quot;&gt;RDS Scale up &amp;amp; out&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Scale up: 하나의 DB 인스턴스의 사양을 높임
    &lt;ul&gt;
      &lt;li&gt;DB instance type를 변경&lt;/li&gt;
      &lt;li&gt;언젠가는 한계에 도달&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Scale out: 여러대의 DB 인스턴스를 생성, master라는 DB 인스턴스 생성 후에 slave라는 별도의 인스턴스 여러대를 master와 동기화,
    &lt;ul&gt;
      &lt;li&gt;읽기 작업: select -&amp;gt; slave&lt;/li&gt;
      &lt;li&gt;쓰기 작업: insert, update, delete -&amp;gt; master(slave는 동기화 필요)&lt;/li&gt;
      &lt;li&gt;master가 여러대 필요해진 경우 sharding이라는 스킬 필요(추후 포스팅)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;slave는 create read replica로 생성 가능&lt;/li&gt;
&lt;/ul&gt;</content><author><name>yhw</name></author><category term="AWS" /><category term="AWS" /></entry><entry><title type="html">[DB] Intro to Relational Model(2)</title><link href="https://rere950303.github.io/db/RDB_2/" rel="alternate" type="text/html" title="[DB] Intro to Relational Model(2)" /><published>2021-11-22T00:00:00+09:00</published><updated>2021-11-22T00:00:00+09:00</updated><id>https://rere950303.github.io/db/RDB_2</id><content type="html" xml:base="https://rere950303.github.io/db/RDB_2/">&lt;h2 id=&quot;relational-query-languages&quot;&gt;Relational Query Languages&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Relataional algebra - Procedural
    &lt;ul&gt;
      &lt;li&gt;여러가지 relation 연산을 제공: Relational operation(Selection, Projection, Natural join, Cartesian product), Set operation(Union, Intersection, Set difference)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;relational calculs - non procedural&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Selection: tuple를 선택(σ)&lt;/li&gt;
  &lt;li&gt;Projection: 속성을 선택(π) - relation은 집합 개념이므로 중복되는 tuple은 하나만 남고 삭제된다.&lt;/li&gt;
  &lt;li&gt;Cartesian product: 피연산자 두개의 relation을 곱해서 모든 pair를 가지는 relation을 생성한다. 일치하는 속성의 유무는 문제가 되지 않는다.&lt;/li&gt;
  &lt;li&gt;Union: relation이 가지는 tuple의 구조가 동일해야 연산이 가능하다. tuple의 합집합을 갖는 relation를 생성한다.&lt;/li&gt;
  &lt;li&gt;Natural Join: 공통되는 속성에서 같은 값을 가지는 두개의 tuple를 연결한 결과를 속성 합집합을 스키마로 갖는 relation의 tuple로 넣어주는 연산을 말한다.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>yhw</name></author><category term="DB" /><category term="DB" /><category term="RDB" /></entry><entry><title type="html">[DB] Intro to Relational Model(1)</title><link href="https://rere950303.github.io/db/RDB_1/" rel="alternate" type="text/html" title="[DB] Intro to Relational Model(1)" /><published>2021-11-19T00:00:00+09:00</published><updated>2021-11-19T00:00:00+09:00</updated><id>https://rere950303.github.io/db/RDB_1</id><content type="html" xml:base="https://rere950303.github.io/db/RDB_1/">&lt;h2 id=&quot;relational-database-structure&quot;&gt;Relational Database Structure&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;RDB
    &lt;ul&gt;
      &lt;li&gt;relation: table(tuple 집합)&lt;/li&gt;
      &lt;li&gt;tuple: a row of table(속성들의 집합을 의미하며 n개의 속성으로 이루어진 tuple를 n-tuple라고 부른다.)&lt;/li&gt;
      &lt;li&gt;attribute: table의 열을 의미하낟.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;RDB는 tables의 집합으로 이루어진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;attribute-types&quot;&gt;Attribute Types&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;각 속성별로 가질수 있는 값들의 집합을 domain이라고 부른다.&lt;/li&gt;
  &lt;li&gt;속성들의 값은 atomic 해야하고 단 하나의 값만 가질수 있다.&lt;/li&gt;
  &lt;li&gt;모든 domain은 null값을 가질수 있는데 여기서 null이라고 함은 unknown or does not exist를 의미한다.&lt;/li&gt;
  &lt;li&gt;null값은 많은 연산에서 복잡함을 야기한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;relation-schema-and-instance&quot;&gt;Relation Schema and Instance&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;속성들과 해당 속성들의 도메인의 집합&lt;/li&gt;
  &lt;li&gt;R = {A1, A2, …, An} -&amp;gt; instructor = {ID, name, dept_name, salary}&lt;/li&gt;
  &lt;li&gt;relation r은 D1 * D2 * … * Dn의 부분집합이다.&lt;/li&gt;
  &lt;li&gt;Instance는 r의 현재 값, 즉 스냅샷을 의미한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;keys&quot;&gt;Keys&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;key는 R의 부분집합이다.&lt;/li&gt;
  &lt;li&gt;super key는 key 중에서 tuple의 유일성을 만족하는 key이다.&lt;/li&gt;
  &lt;li&gt;candidate key는 super key중에서 최소성을 만족하는 key이다.&lt;/li&gt;
  &lt;li&gt;primary key는 candidate key중에 선택된 하나의 key이다. (null값을 가지면 안된다.)&lt;/li&gt;
  &lt;li&gt;외래키 제약조건: relation에 존재하는 외래키의 값은 참조되는 relation에 반드시 값이 존재해야 한다.(참조하는 r &amp;lt;-&amp;gt; 참조되는 r)&lt;/li&gt;
&lt;/ul&gt;</content><author><name>yhw</name></author><category term="DB" /><category term="DB" /><category term="RDB" /></entry><entry><title type="html">[DB] DB Components, Architecture</title><link href="https://rere950303.github.io/db/DB_Components/" rel="alternate" type="text/html" title="[DB] DB Components, Architecture" /><published>2021-11-18T00:00:00+09:00</published><updated>2021-11-18T00:00:00+09:00</updated><id>https://rere950303.github.io/db/DB_Components</id><content type="html" xml:base="https://rere950303.github.io/db/DB_Components/">&lt;h2 id=&quot;storage-management&quot;&gt;Storage Management&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;저장 장치 관리자는 DB에 저장된 data와 App / query 사이에 인퍼테이스 역할을 하는 프로그램 모듈이다.&lt;/li&gt;
  &lt;li&gt;file manager와 통신하면서 효율적인 data storing, retrieving, updating 역할을 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;query-processing&quot;&gt;Query Processing&lt;/h2&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/post/DB/3/1.png&quot;&gt;
          &lt;img src=&quot;/assets/images/post/DB/3/1.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;parser / translator 이용하여 관계대수표현으로 변환한다.&lt;/li&gt;
  &lt;li&gt;통계자료를 통해 쿼리를 최적화하고 data를 얻기 위한 절차적 계획을 세운다.&lt;/li&gt;
  &lt;li&gt;해당 계획을 실행하고 테이블 형태의 query output를 내놓는다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;transaction-management&quot;&gt;Transaction Management&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Database System Internal: user, query processor, storage manager, disk storage 로 구성&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;half &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/post/DB/3/2.png&quot;&gt;
          &lt;img src=&quot;/assets/images/post/DB/3/2.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Transaction: DB App 에서 하나의 논리적 함수를 수행하기 위한 연산들의 집합을 말한다. DB 연산의 단위를 의미한다.&lt;/li&gt;
  &lt;li&gt;Transaction-management component: system faulure / transaction faulre 에도 불구하고 data의 일관성을 유지시켜 준다.&lt;/li&gt;
  &lt;li&gt;Concurrency-control manager: DB에 대한 동시 접근 제어함으로써 data의 일관성을 유지시키고 최대 많은 transaction을 허용함으로써 효율성을 극대화 시킨다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;database-architecture&quot;&gt;Database Architecture&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;DB의 구조는 DB가 실행되고 있는 컴퓨터 시스템에 큰 영향을 받는다.&lt;/li&gt;
  &lt;li&gt;Centralized: DB의 모든 요소가 단일 시스템에 포함(DBMS, App, API)&lt;/li&gt;
  &lt;li&gt;Client-Server: 사용자가 필요한 특정 서버에 접근하는 방식&lt;/li&gt;
  &lt;li&gt;Parallel: 여러 disk와 하나의 공유 메모리를 통해 처리량을 높이는 방식&lt;/li&gt;
  &lt;li&gt;Distributed: DB를 여러개의 노드로 분산한후 통신을 통해 하나의 논리적 DB를 구축하는 방식&lt;/li&gt;
&lt;/ul&gt;</content><author><name>yhw</name></author><category term="DB" /><category term="DB" /></entry><entry><title type="html">[DB] Data Models, Data Languages, Data Approaches</title><link href="https://rere950303.github.io/db/Data/" rel="alternate" type="text/html" title="[DB] Data Models, Data Languages, Data Approaches" /><published>2021-11-17T00:00:00+09:00</published><updated>2021-11-17T00:00:00+09:00</updated><id>https://rere950303.github.io/db/Data</id><content type="html" xml:base="https://rere950303.github.io/db/Data/">&lt;h2 id=&quot;data-models&quot;&gt;Data Models&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;A colleciton of for descibing Data, Data relationships, Data semantics, Data constraints&lt;/li&gt;
  &lt;li&gt;Relational model
    &lt;ul&gt;
      &lt;li&gt;관계형 모델은 실제 세계의 데이터를 관계라는 개념을 사용하여 표현한 데이터 모델이다.&lt;/li&gt;
      &lt;li&gt;릴레이션(테이블), 튜플(행), 속성(칼럼)&lt;/li&gt;
      &lt;li&gt;SQL로 많은 발전을 이룸&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Entity-Relationship data model
    &lt;ul&gt;
      &lt;li&gt;DB 설계시 주로 사용&lt;/li&gt;
      &lt;li&gt;개체: 단독으로 존재하는 객체를 의미하며, 동일한 개체는 존재하지 않는다. 속성들의 집합으로 하나의 개체가 완성된다.&lt;/li&gt;
      &lt;li&gt;속성: 객체가 갖는 속성을 의미한다.&lt;/li&gt;
      &lt;li&gt;관계: 객체간의 관계를 의미한다. 관계역시 여러가지 속성을 가질 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/post/DB/2/1.png&quot;&gt;
          &lt;img src=&quot;/assets/images/post/DB/2/1.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;그 외 Object-oriented and Object-relational, XML, Network, hierarchical model 등이 존재한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;data-manipulation-languagedml&quot;&gt;Data Manipulation Language(DML)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;DBMS를 통해 data CRUD를 할때에 사용되는 언어, query language라고도 한다.&lt;/li&gt;
  &lt;li&gt;Two classes of languages
    &lt;ul&gt;
      &lt;li&gt;Procedural: 사용자가 data를 어떠한 방법으로 얻을지에 대해 명시한다.&lt;/li&gt;
      &lt;li&gt;nonprocedural: 사용자는 원하는 data만을 명시하고 그 방법은 DBMS에 위임한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SQL이 가장 대표적인 쿼리언어이다. (nonprocedural)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;data-definition-languageddl&quot;&gt;Data Definition Language(DDL)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;테이블과 같은 데이터 구조를 정의하는데 사용되는 명령어로 데이터 구조와 관련된 명령어를 말한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tabel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instrcutor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;          &lt;span class=&quot;nb&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;        &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dept_name&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt;      &lt;span class=&quot;nb&quot;&gt;numeric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;DDL 컴파일러는 data dictionary에 저장되는 테이블 / 뷰를 생성한다.&lt;/li&gt;
  &lt;li&gt;Data dictionary는 메타데이터를 포함한다.(data about data)
    &lt;ul&gt;
      &lt;li&gt;Database schema&lt;/li&gt;
      &lt;li&gt;무결성 제약조건(기본키 조건, 참조 무결성 조건)&lt;/li&gt;
      &lt;li&gt;인가&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sql&quot;&gt;SQL&lt;/h2&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;instructor&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;instructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;22222&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;instructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;department&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;building&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;instructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;department&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;카디션&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;곱&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;instructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dept_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;department&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dept_name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;department&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dept_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Physics&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;App 프로그램의 DB 접근 방법
    &lt;ul&gt;
      &lt;li&gt;내장된 SQL 언어를 직접사용&lt;/li&gt;
      &lt;li&gt;ODBC / JDBC와 같은 API를 사용하여 DB에 SQL 쿼리 생성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;data-approaches&quot;&gt;Data Approaches&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;테이블 정규화: 어떠한 설계가 나쁜 설계인지 정의하고 테스트한다. data 불일치, 중복 등을 배제&lt;/li&gt;
  &lt;li&gt;ER model: DB에 대한 요구사항을 분석하고 ER model를 설계한다. 실제 세계에서 뿐만 아니라 DB에서 필요한 개체, 그 개체의 속성, 개체들의 관계를 정의한다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>yhw</name></author><category term="DB" /><category term="DB" /><category term="SQL" /></entry><entry><title type="html">[DB] Database Management System(DBMS)</title><link href="https://rere950303.github.io/db/DBMS/" rel="alternate" type="text/html" title="[DB] Database Management System(DBMS)" /><published>2021-11-17T00:00:00+09:00</published><updated>2021-11-17T00:00:00+09:00</updated><id>https://rere950303.github.io/db/DBMS</id><content type="html" xml:base="https://rere950303.github.io/db/DBMS/">&lt;ul&gt;
  &lt;li&gt;DBMS에는 특정 기관에 대한 정보를 가지고 있다.
    &lt;ul&gt;
      &lt;li&gt;연관된 data의 집합&lt;/li&gt;
      &lt;li&gt;data와 data 접근에 필요한 프로그램의 집합&lt;/li&gt;
      &lt;li&gt;쉽고 편한 data CRUD 환경 제공&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;초창기 database app은 파일 시스템을 이용하여 구축되었다. 이는 여러가지 단점이 존재했다.
    &lt;ul&gt;
      &lt;li&gt;data 증폭 및 불일치: 여러 종류의 파일과 다양한 포맷&lt;/li&gt;
      &lt;li&gt;data 접근의 어려움: 새로운 작업을 수행하기 위해서는(예를 들어 특정 조건을 만족하는 data list 검색) 새로운 프로그램을 작성해야 된다.&lt;/li&gt;
      &lt;li&gt;data 고립: 서로 관련된 data들이 다른 파일 / 포맷으로 흩어짐&lt;/li&gt;
      &lt;li&gt;무결성 문제: 무결성 제약조건이 DB와 다르게 명시적으로 나타나지 않으며 해당 조건이 지켜지기 어렵다. 따라서 프로그램에 제약조건이 내포될 수 밖에 없는데 이로 인해 새로운 제약조건을 추가하거나 기조의 조건을 변경하는 것이 어렵다.&lt;/li&gt;
      &lt;li&gt;원자 단위의 업데이트: 업데이트중 일부분만이 수행될 경우 data 일관성이 깨지게 된다.&lt;/li&gt;
      &lt;li&gt;동시접근: 성능을 위해서는 data에 대한 동시 접근이 필요한데 이에 대한 통제가 제대로 이루어지지 않는다면 data 일관성이 깨지고 만다. 따라서 많은 user들이 서로 다른 data에 접근하게 되는 일이 발생할 수도 있다.&lt;/li&gt;
      &lt;li&gt;보안문제: 파일 시스템의 경우 특정 유저에게 특정 data에만 접근 가능한 권한 설정이 어렵다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Levels of Abstraction
    &lt;ul&gt;
      &lt;li&gt;Physical level: record가 어떻게 저장되는지(하드웨어 측면)&lt;/li&gt;
      &lt;li&gt;Logical level: DB에 저장되는 data와 data사이 관계 설명
        &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dept_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;View level: app은 data의 타입을 숨기고, 보안상 여러 data를 유저로부터 숨긴다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인스턴스와 스키마
    &lt;ul&gt;
      &lt;li&gt;스키마: DB의 논리적 구조를 의미한다. 예를 들어 특정 DB는 소비자, 계좌, 그들의 관계에 대한 정보로 이루어져 있다.
        &lt;ul&gt;
          &lt;li&gt;Physical schema: Physical level에서의 DB 설계&lt;/li&gt;
          &lt;li&gt;Logical schema: Logical level에서의 DB 설계&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;인스턴스: 특정 시점에 DB에 있는 실제 data&lt;/li&gt;
      &lt;li&gt;Physical Data independence: Physical schema가 변해도 Logical schema는 변하지 않는다. 즉 영향이 없다. 하지만 App은 Logical schema을 기반으로 설계되기 떄문에 Logical schema가 변동되면 App도 변경이 필요하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>yhw</name></author><category term="DB" /><category term="DB" /><category term="DBMS" /></entry></feed>